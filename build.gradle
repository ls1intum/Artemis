import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id "checkstyle"
    id "java"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot" version "${spring_boot_version}"
    id "io.spring.dependency-management" version "1.1.3"
    id "com.google.cloud.tools.jib" version "3.3.2"
    id "com.github.node-gradle.node" version "${gradle_node_plugin_version}"
    id "com.diffplug.spotless" version "6.21.0"
    // this allows us to find outdated dependencies via ./gradlew dependencyUpdates
    id "com.github.ben-manes.versions" version "0.48.0"
    id "com.github.andygoossens.modernizer" version "${modernizer_plugin_version}"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "info.solidsoft.pitest" version "1.9.11"
    id "org.owasp.dependencycheck" version "8.4.0"
    id "com.adarshr.test-logger" version "3.2.0"
}

group = "de.tum.in.www1.artemis"
version = "6.5.1"
description = "Interactive Learning with Individual Feedback"

sourceCompatibility=17
targetCompatibility=17

//this enables us to invoke ./gradlew liquibaseDiffChangelog
apply from: "gradle/liquibase.gradle"

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

apply plugin: "jacoco"

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

spotless {
    // allows to execute the code formatting commands ./gradlew spotlessApply and ./gradlew spotlessCheck
    java {
        target project.fileTree(project.rootDir) {
            include "**/*.java"
            exclude(
                "**/src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java",
                "**/src/test/resources/test-data/repository-export/EncodingISO_8559_1.java",
                "**/node_modules/**",
                "**/out/**",
                "**/repos/**",
                "**/repos-download/**",
                "**/build/**",
                "**/src/main/generated/**",
                "**/src/main/resources/templates/**",
                "/docker/**"
            )
        }
        importOrderFile "artemis-spotless.importorder"
        eclipse("4.19").configFile "artemis-spotless-style.xml"

        removeUnusedImports()
        trimTrailingWhitespace()
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "de.tum.in.www1.artemis.ArtemisApp"
}

modernizer {
    failOnViolations = false
    includeTestClasses = true
    // Copy the rule name as defined in https://github.com/gaul/modernizer-maven-plugin/blob/master/modernizer-maven-plugin/src/main/resources/modernizer.xml to exclude it
    exclusions = ["java/util/Optional.get:()Ljava/lang/Object;"]
}

// Execute the test cases: ./gradlew test
// Execute only architecture tests: ./gradlew test -DincludeTags='ArchitectureTest'
test {
    if (System.getProperty("includeTags")) {
        useJUnitPlatform {
            includeTags System.getProperty("includeTags")
        }
    } else {
        useJUnitPlatform()
        exclude "**/*IT*", "**/*IntTest*"
    }

    testLogging {
        events "FAILED", "SKIPPED"
    }
    testLogging.showStandardStreams = true
    reports.html.required = false
    minHeapSize = "1024m" // initial heap size
    maxHeapSize = "3072m" // maximum heap size
}

tasks.register("testReport", TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

jacoco {
    toolVersion = "0.8.10"
}

jar {
    enabled = false
}

private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it,
            exclude: [
                "**/de/tum/in/www1/artemis/domain/**/*_*",
                "**/de/tum/in/www1/artemis/config/migration/entries/**",
                "**/gradle-wrapper.jar/**"
            ]
        )
    }))
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    // we want to ignore some generated files in the domain folders
    afterEvaluate {
        excludedClassFilesForReport(classDirectories)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 0.90
            }
            limit {
                counter = "CLASS"
                value = "MISSEDCOUNT"
                // TODO: in the future the following value should become less than 10
                maximum = 19
            }
        }
    }
    // we want to ignore some generated files in the domain folders
    afterEvaluate {
        excludedClassFilesForReport(classDirectories)
    }
}
check.dependsOn jacocoTestCoverageVerification

configurations {
    providedRuntime
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://repo.gradle.org/gradle/libs-releases/"
    }
}

ext["jackson.version"] = fasterxml_version

dependencies {

    // This will make sure that e.g. src/main/java/de/tum/in/www1/artemis/config/BeanInfoProcessor.java is invoked during the build
    annotationProcessor "com.google.auto.service:auto-service:1.1.1"
    compileOnly "com.google.auto.service:auto-service:1.1.1"

    // Note: jenkins-client is not well maintained and includes dependencies to libraries with critical security issues (e.g. CVE-2020-10683 for dom4j@1.6.1)
    //    implementation "com.offbytwo.jenkins:jenkins-client:0.3.8"
    implementation files("libs/jenkins-client-0.4.0.jar")
    // The following 4 dependencies are explicitly integrated as transitive dependencies of jenkins-client-0.4.0.jar
    implementation "org.apache.httpcomponents:httpclient:4.5.14"
    implementation "org.apache.httpcomponents:httpcore:4.4.16"
    implementation "org.apache.httpcomponents:httpmime:4.5.14"
    implementation ("org.dom4j:dom4j:2.1.4") {
        // Note: avoid org.xml.sax.SAXNotRecognizedException: unrecognized feature http://xml.org/sax/features/external-general-entities
        // also see https://github.com/dom4j/dom4j/issues/99
        exclude module: "pull-parser"
        exclude module: "jaxen"
        exclude module: "xpp3"
        exclude module: "xsdlib"
        exclude module: "stax-api"
        exclude module: "jaxb-api"
    }


    implementation "org.gitlab4j:gitlab4j-api:5.3.0"

    implementation "de.jplag:jplag:${jplag_version}"
    implementation "de.jplag:java:${jplag_version}"
    implementation "de.jplag:kotlin:${jplag_version}"
    implementation "de.jplag:cpp:${jplag_version}"
    implementation "de.jplag:swift:${jplag_version}"
    implementation "de.jplag:java:${jplag_version}"
    implementation "de.jplag:python-3:${jplag_version}"
    implementation "de.jplag:text:${jplag_version}"

    // we have to override those values to avoid issues with Spring (JPlag wants to use a newer version which would conflict otherwise)
    implementation "org.slf4j:jcl-over-slf4j:${slf4j_version}"
    implementation "org.slf4j:jul-to-slf4j:${slf4j_version}"
    implementation ("org.slf4j:slf4j-api") {
        version {
            strictly "${slf4j_version}"
        }
    }

    implementation "org.apache.logging.log4j:log4j-to-slf4j:2.20.0"

    implementation "uk.ac.ox.ctl:spring-security-lti13:0.0.4"

    // https://search.maven.org/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation "org.eclipse.jgit:org.eclipse.jgit:${jgit_version}"
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:${jgit_version}"
    implementation "org.eclipse.jgit:org.eclipse.jgit.http.server:${jgit_version}"
    // https://mvnrepository.com/artifact/net.sourceforge.plantuml/plantuml
    implementation "net.sourceforge.plantuml:plantuml:1.2023.10"
    implementation "org.imsglobal:basiclti-util:1.2.0"
    implementation "org.jasypt:jasypt:1.9.3"
    implementation "me.xdrop:fuzzywuzzy:1.4.0"
    implementation "com.atlassian.bamboo:bamboo-specs:9.3.3"
    implementation ("org.yaml:snakeyaml") {
        version {
            strictly "2.0" // needed for Bamboo-specs and to reduce the number of vulnerabilities, also see https://mvnrepository.com/artifact/org.yaml/snakeyaml
        }
    }


    implementation "com.thoughtworks.qdox:qdox:2.0.3"
    implementation "io.sentry:sentry-logback:${sentry_version}"
    implementation "io.sentry:sentry-spring-boot-starter:${sentry_version}"
    implementation "org.jsoup:jsoup:1.16.1"
    implementation "commons-codec:commons-codec:1.16.0"   // needed for spring security saml2

    implementation "org.springdoc:springdoc-openapi-ui:1.7.0"
    implementation "com.vdurmont:semver4j:3.1.0"

    implementation "com.github.docker-java:docker-java-core:3.3.3"
    implementation "com.github.docker-java:docker-java-transport-httpclient5:3.3.3"

    // import JHipster dependencies BOM
    implementation platform("tech.jhipster:jhipster-dependencies:${jhipster_dependencies_version}")

    implementation "tech.jhipster:jhipster-framework:${jhipster_dependencies_version}"
    implementation "org.springframework.boot:spring-boot-starter-cache:${spring_boot_version}"
    implementation "io.micrometer:micrometer-registry-prometheus:1.11.4"
    implementation "net.logstash.logback:logstash-logback-encoder:7.4"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${fasterxml_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${fasterxml_version}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${fasterxml_version}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${fasterxml_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${fasterxml_version}"
    implementation "com.hazelcast:hazelcast:${hazelcast_version}"
    implementation "com.hazelcast:hazelcast-spring:${hazelcast_version}"
    implementation "com.hazelcast:hazelcast-hibernate53:5.1.0"
    implementation "javax.cache:cache-api:1.1.1"
    implementation "org.hibernate:hibernate-core:${hibernate_version}"
    implementation "com.zaxxer:HikariCP:5.0.1"
    implementation "org.apache.commons:commons-text:1.10.0"
    implementation "org.apache.commons:commons-math3:3.6.1"
    implementation "javax.transaction:javax.transaction-api:1.3"
    implementation "org.hibernate:hibernate-entitymanager:${hibernate_version}"
    implementation "org.liquibase:liquibase-core:4.23.2"
    implementation "org.springframework.boot:spring-boot-starter-validation:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-loader-tools:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-logging:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-aop:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-security:${spring_boot_version}"
    implementation ("org.springframework.boot:spring-boot-starter-web:${spring_boot_version}") {
        exclude module: "spring-boot-starter-undertow"
    }
    implementation "org.springframework.boot:spring-boot-starter-tomcat:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-websocket:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${spring_boot_version}"

    implementation "org.springframework.ldap:spring-ldap-core:2.4.1"
    implementation "org.springframework.data:spring-data-ldap:2.7.15"

    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.7"
    implementation "org.springframework.cloud:spring-cloud-starter-config:3.1.8"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors:2.2.13.RELEASE"

    implementation "io.netty:netty-all:4.1.97.Final"
    implementation "io.projectreactor.netty:reactor-netty:1.1.11"
    implementation "org.springframework:spring-messaging:5.3.29"
    implementation "org.springframework.retry:spring-retry:2.0.3"

    implementation "org.springframework.security:spring-security-config:${spring_security_version}"
    implementation "org.springframework.security:spring-security-data:${spring_security_version}"
    implementation "org.springframework.security:spring-security-web:${spring_security_version}"
    implementation "org.springframework.security:spring-security-messaging:${spring_security_version}"
    implementation "org.springframework.security:spring-security-ldap:${spring_security_version}"
    implementation "org.springframework.security:spring-security-saml2-service-provider:${spring_security_version}"
    implementation "org.xmlbeam:xmlprojector:1.4.24"
    implementation "io.jsonwebtoken:jjwt-api:0.11.5"
    implementation "org.bouncycastle:bcprov-jdk15on:1.70"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.5"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.5"
    implementation ("io.springfox:springfox-swagger2:3.0.0") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators:3.0.0"
    implementation "mysql:mysql-connector-java:8.0.33"
    implementation "org.postgresql:postgresql:42.6.0"
    implementation "com.h2database:h2:2.2.222"

    // zalando problem spring web can only be updated when we support Spring 6
    implementation "org.zalando:problem-spring-web:0.27.0"
    implementation "com.ibm.icu:icu4j:73.2"
    implementation "com.github.seancfoley:ipaddress:5.4.0"
    implementation "org.apache.maven:maven-model:3.9.4"
    implementation "org.apache.pdfbox:pdfbox:3.0.0"
    implementation "com.google.protobuf:protobuf-java:3.24.3"
    implementation "org.apache.commons:commons-csv:1.10.0"
    implementation "org.commonmark:commonmark:0.21.0"
    implementation "commons-fileupload:commons-fileupload:1.5"
    implementation "net.lingala.zip4j:zip4j:2.11.5"
    implementation "org.jgrapht:jgrapht-core:1.5.2"


    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernate_version}"
    annotationProcessor ("org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}") {
        exclude group: "javax.ws.rs", module: "jsr311-api"
    }
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation ("org.springframework.boot:spring-boot-starter-test:${spring_boot_version}") {
        exclude module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test:${spring_security_version}"
    testImplementation "org.springframework.boot:spring-boot-test:${spring_boot_version}"
    testImplementation "org.assertj:assertj-core:3.24.2"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockito_version}"
    testImplementation "io.github.classgraph:classgraph:4.8.162"
    testImplementation "org.awaitility:awaitility:4.2.0"
    testImplementation "org.apache.maven.shared:maven-invoker:3.2.0"
    testImplementation "org.gradle:gradle-tooling-api:8.3"
    testImplementation "org.apache.maven.surefire:surefire-report-parser:3.1.2"
    testImplementation "com.opencsv:opencsv:5.8"
    testImplementation "io.zonky.test:embedded-database-spring-test:2.3.0"
    testImplementation "com.tngtech.archunit:archunit:1.1.0"
    testImplementation "org.skyscreamer:jsonassert:1.5.1"

    // Lightweight JSON library needed for the internals of the MockRestServiceServer
    testImplementation "org.json:json:20230618"
}

dependencyManagement {
    imports {
        mavenBom "io.zonky.test.postgres:embedded-postgres-binaries-bom:15.3.0"
    }
}

tasks.register("cleanResources", Delete) {
    delete "build/resources"
}

// Taken from here: https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
tasks.withType(Test).configureEach {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = "|  ", endItem = "  |"
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
            }
        }
    }
}

wrapper {
    gradleVersion = "8.3"
}

tasks.register("stage") {
    dependsOn "bootWar"
}

node {
    download = true
    version = "${node_version}"
    npmVersion = "${npm_version}"
}

// Command to execute the JavaDoc checkstyle verification ./gradlew checkstyleMain
checkstyle {
    toolVersion "${checkstyle_version}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
    maxErrors = 0
}

def isNonStable = { String version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

pitest {
    targetClasses = ["de.tum.in.www1.artemis.service.exam.ExamService"]
    targetTests = [
        "de.tum.in.www1.artemis.StudentExamIntegrationTest",
        "de.tum.in.www1.artemis.ExamIntegrationTest",
    ]
    outputFormats = ["XML", "HTML"]
    timestampedReports = false
    junit5PluginVersion = "1.0.0"
    timeoutFactor = 1.5
    timeoutConstInMillis = 10000
    useClasspathFile = true
}

// Available commands:
//
// 1) Build production:                             ./gradlew -Pprod -Pwar clean bootWar
// 2) Execute tests with coverage report:           ./gradlew test jacocoTestReport -x webapp
// 2a) Execute tests without coverage report:       ./gradlew test -x webapp
// 2b) Run a single test:                           ./gradlew test --tests ExamIntegrationTest -x webapp or ./gradlew test --tests ExamIntegrationTest.testGetExamScore -x webapp
// 3) Verify code coverage (after tests):           ./gradlew jacocoTestCoverageVerification
// 4) Check Java code format:                       ./gradlew spotlessCheck -x webapp
// 5) Apply Java code formatter:                    ./gradlew spotlessApply -x webapp
// 6) Find dependency updates:                      ./gradlew dependencyUpdates -Drevision=release
// 7) Check JavaDoc:                                ./gradlew checkstyleMain -x webapp
// 8) Detects uses of legacy code:                  ./gradlew modernizer -x webapp
// 9) Check for vulnerabilities in dependencies     ./gradlew dependencyCheckAnalyze -x webapp
// 10) Generate Liquibase diff:                     ./gradlew liquibaseDiffChangelog
// 11) Clear Liquibase checksums:                   ./gradlew liquibaseClearChecksums
// 12) Create changelog between Java and DB         ./gradlew liquibaseDiffChangeLog (make sure to set the correct username and password in liquibase.gradle)
// 13) Generate initial schema from DB              ./gradlew liquibaseGenerateChangelog (make sure to set the correct username and password in liquibase.gradle)
// 14) Run PIT Mutation Tests:                      ./gradlew pitest -x webapp

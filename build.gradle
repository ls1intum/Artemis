buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
    }
}

plugins {
    id "checkstyle"
    id "java"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot" version "${spring_boot_version}"
    id "com.google.cloud.tools.jib" version "3.2.0"
    id "com.github.node-gradle.node" version "3.2.0"
    id "com.diffplug.spotless" version "6.2.2"
    // this allows us to find outdated dependencies via ./gradlew dependencyUpdates
    id "com.github.ben-manes.versions" version "0.42.0"
    id "com.github.andygoossens.modernizer" version "1.6.2"
}

group = "de.tum.in.www1.artemis"

allprojects {
    version = "5.5.5"
    description = "Interactive Learning with Individual Feedback"
}

sourceCompatibility=16
targetCompatibility=16

apply from: "gradle/docker.gradle"
//this enables us to invoke ./gradlew liquibaseDiffChangelog
apply from: "gradle/liquibase.gradle"

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

apply plugin: "jacoco"

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

spotless {
    // allows to execute the code formatting commands ./gradlew spotlessApply and ./gradlew spotlessCheck
    java {
        target project.fileTree(project.rootDir) {
            include "**/*.java"
            exclude "**/src/main/java/de/tum/in/www1/artemis/service/connectors/BambooService.java", "**/src/main/java/de/tum/in/www1/artemis/config/SecurityConfiguration.java", "**/src/main/java/de/tum/in/www1/artemis/config/SAML2Configuration.java", "**/src/test/resources/test-data/repository-export/EncodingISO_8559_1.java", "**/node_modules/**", "**/out/**", "**/repos/**", "**/build/**", "**/src/main/generated/**", "**/src/main/resources/templates/**", "**/gateway/**", "**/user-management/**", "**/lecture/**"
        }
        importOrderFile "artemis-spotless.importorder"
        eclipse("4.19.0").configFile "artemis-spotless-style.xml"

        removeUnusedImports()
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "de.tum.in.www1.artemis.ArtemisApp"
}

bootRun {
    jvmArgs = ["--illegal-access=warn"]
}

modernizer {
    failOnViolations = false
    includeTestClasses = true
}

apply from: "gradle/tasks.gradle"

// configure excluded classes from the test coverage report
private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it,
            exclude: [
                "**/de/tum/in/www1/artemis/domain/**/*_*",
                "gateway/**", // exclude the gateway project from test coverage report for the moment until it is activated
                "user-management/**", // exclude the user-management project from test coverage report for the moment until it is activated
                "**/de/tum/in/www1/artemis/config/migration/entries/*_*"
            ]
        )
    }))
}

jacocoTestReport.configure {
    // we want to ignore some generated files in the domain folders as well as files from different projects
    afterEvaluate { excludedClassFilesForReport(classDirectories) }
}

jacocoTestCoverageVerification.configure {
    // we want to ignore some generated files in the domain folders as well as files from different projects
    afterEvaluate { excludedClassFilesForReport(classDirectories) }
}

configurations {
    providedRuntime
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

apply from: "gradle/dependencies.gradle"

dependencies {
    implementation "com.offbytwo.jenkins:jenkins-client:${offbytwo_jenkins_client_version}"
    implementation "org.gitlab4j:gitlab4j-api:${gitlab4j_api_version}"

    implementation "de.jplag:jplag:${jplag_version}"

    // https://mvnrepository.com/artifact/net.sourceforge.plantuml/plantuml
    implementation "net.sourceforge.plantuml:plantuml:${sourceforge_plantuml_version}"
    implementation "org.imsglobal:basiclti-util:${imsglobal_basiclti_util_version}"
    implementation "me.xdrop:fuzzywuzzy:${xdrop_fuzzywuzzy_version}"
    implementation "com.atlassian.bamboo:bamboo-specs:${atlassian_bamboo_specs_version}"
    implementation "com.thoughtworks.qdox:qdox:${thoughtworks_qdox_version}"

    implementation "org.springdoc:springdoc-openapi-ui:${springdoc_openapi_ui_version}"
    implementation "com.hazelcast:hazelcast:${hazelcast_version}"
    implementation "com.hazelcast:hazelcast-spring:${hazelcast_version}"
    implementation "com.hazelcast:hazelcast-hibernate53:${hazelcast_hibernate53_version}"
    implementation "org.hibernate:hibernate-core:${hibernate_version}"
    implementation "com.zaxxer:HikariCP:${zaxxer_HikariCP_version}"
    implementation "org.apache.commons:commons-text:${apache_commons_text_version}"
    implementation "org.apache.commons:commons-math3:${apache_commons_math3_version}"
    implementation "org.hibernate:hibernate-jcache:${hibernate_version}"
    implementation "org.hibernate:hibernate-entitymanager:${hibernate_version}"
    implementation "org.liquibase:liquibase-core:${liquibase_core_version}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}"
    implementation ("org.springframework.boot:spring-boot-starter-web:${spring_boot_version}") {
        exclude module: "spring-boot-starter-undertow"
    }
    implementation "org.springframework.boot:spring-boot-starter-tomcat:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-websocket:${spring_boot_version}"

    implementation "org.springframework.ldap:spring-ldap-core:${spring_ldap_core_version}"
    implementation "org.springframework.data:spring-data-ldap:${spring_data_ldap_version}"

    implementation "io.netty:netty-all:${netty_version}"
    implementation "io.projectreactor.netty:reactor-netty:${netty_reactor_version}"
    implementation "org.springframework:spring-messaging:${spring_messaging_version}"

    implementation "org.springframework.security:spring-security-data:${spring_security_version}"
    implementation "org.springframework.security:spring-security-ldap:${spring_security_version}"
    implementation "org.springframework.security:spring-security-saml2-service-provider:${spring_security_version}"
    implementation "org.xmlbeam:xmlprojector:${xmlbeam_xmlprojector_version}"
    implementation "io.springfox:springfox-bean-validators:${springfox_version}"
    implementation "mysql:mysql-connector-java:${mysql_connector_java_version}"

    implementation "org.zalando:problem-spring-web:${zalando_problem_version}"
    implementation "com.ibm.icu:icu4j:${ibm_icu4j_version}"
    implementation "com.github.seancfoley:ipaddress:${github_seancfoley_ipaddress_version}"
    implementation "org.apache.maven:maven-model:${apache_model_version}"
    implementation "org.apache.pdfbox:pdfbox:${apache_pdfbox_version}"
    implementation "com.google.protobuf:protobuf-java:${google_protobuf_java_version}"
    implementation "org.commonmark:commonmark:${commonmark_version}"
    implementation "org.springframework.boot:spring-boot-starter-artemis:${spring_boot_version}"

    implementation "de.tum.in.ase.athene:client:${athene_client_version}"

    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernate_version}"
    annotationProcessor ("org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}") {
        exclude group: "javax.ws.rs", module: "jsr311-api"
    }
    testImplementation "com.h2database:h2:${h2_database_version}"
    testImplementation "com.opencsv:opencsv:${opencsv_version}"
}

task executeTests (type: Exec) {
    commandLine "./gradlew", "test", "-x", "webapp"
}

allprojects {
    wrapper {
        gradleVersion = "7.4"
    }
}

task stage(dependsOn: "bootWar") {
}

node {
    download = true
    version = "${node_version}"
    npmVersion = "${npm_version}"
}

// Command to execute the JavaDoc checkstyle verification ./gradlew checkstyleMain
checkstyle {
    toolVersion "${checkstyle_version}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
    maxErrors = 0
}

task executeCheckstyle (type: Exec) {
    commandLine "./gradlew", "checkstyleMain", "-x", "npm", "-x", "webapp"
}

task buildJarForDocker (type: Exec) {
    commandLine "./gradlew", "build", "-x", "webapp", "-x", "test", "-x", "jacocoTestCoverageVerification"
}

def isNonStable = { String version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }

    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject("Release candidate")
                }
            }
        }
    }
}

gradle.taskGraph.whenReady { graph ->
    def tasks = gradle.startParameter.taskNames.toString()

    def hasRootUserManagementTask = tasks.contains(":user-management:")

    if (!hasRootUserManagementTask) {
        graph.getAllTasks().each { task ->
            def subUserManagementTask = (task.path =~ /:user-management.+/)
            if (subUserManagementTask) {
                println "TRACER skipping task ${task.path}"
                task.enabled = false
            }
        }
    }

    def hasRootGatewayTask = tasks.contains(":gateway:")

    if (!hasRootGatewayTask) {
        graph.getAllTasks().each { task ->
            def subGatewayTask = (task.path =~ /:gateway.+/)
            if (subGatewayTask) {
                println "TRACER skipping task ${task.path}"
                task.enabled = false
            }
        }
    }

    def hasRootLectureTask = tasks.contains(":lecture:")

    if (!hasRootLectureTask) {
        graph.getAllTasks().each { task ->
            def subLectureTask = (task.path =~ /:lecture.+/)
            if (subLectureTask) {
                println "TRACER skipping task ${task.path}"
                task.enabled = false
            }
        }
    }
}

// Available commands:
//
// 1) Build production:                             ./gradlew -Pprod -Pwar clean bootWar
// 2) Execute tests with coverage report:           ./gradlew executeTests jacocoTestReport -x webapp
// 2a) Execute tests without coverage report:       ./gradlew executeTests -x webapp
// 2b) Run a single test:                           ./gradlew test --tests ExamIntegrationTest -x webapp or ./gradlew test --tests ExamIntegrationTest.testGetExamScore -x webapp
// 3) Check Java code format:                       ./gradlew spotlessCheck -x webapp
// 4) Apply Java code formatter:                    ./gradlew spotlessApply -x webapp
// 5) Find dependency updates:                      ./gradlew dependencyUpdates -Drevision=release
// 6) Check JavaDoc:                                ./gradlew checkstyleMain -x webapp
// 7) Generate Liquibase diff:                      ./gradlew liquibaseDiffChangelog
// 8) Clear Liquibase checksums:                    ./gradlew liquibaseClearChecksums
// 9) Verify code coverage (after tests):           ./gradlew jacocoTestCoverageVerification
// 10) Build server only in a war:                  ./gradlew -Pprod -Pwar clean bootWar -x webapp
// 11) Detects uses of legacy code:                 ./gradlew modernizer -x webapp

import org.gradle.internal.os.OperatingSystem

configurations {
    liquibaseRuntime.extendsFrom sourceSets.main.compileClasspath
}

dependencies {
    implementation("org.liquibase:liquibase-core:${liquibase_version}") {
        exclude group: 'com.opencsv', module: 'opencsv'
    }
    liquibaseRuntime "org.liquibase:liquibase-core:${liquibase_version}"
    // Dependency required to parse options. Refer to https://github.com/liquibase/liquibase-gradle-plugin/tree/Release_2.2.0#news.
    liquibaseRuntime "info.picocli:picocli:4.7.6"

    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate6:${liquibase_version}"
    liquibaseRuntime "com.mysql:mysql-connector-j:${mysql_version}"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate6:${liquibase_version}"
}

ext.isWindows = OperatingSystem.current().isWindows()

if (isWindows) {
    tasks.register("pathingLiquibaseJar", Jar) {
        dependsOn configurations.liquibaseRuntime
        archiveAppendix = "pathingLiquibase"

        doFirst {
            manifest {
                attributes "Class-Path": (sourceSets.main.runtimeClasspath + configurations.liquibaseRuntime).collect {
                    it.toURI().toURL().toString().replaceFirst(/file:\/+/, "/")
                }.join(" ")
            }
        }
    }
}

tasks.register("initPaths", {
    group = "liquibase"
    dependsOn tasks.named("compileJava")
    if (isWindows) {
        dependsOn tasks.named("pathingLiquibaseJar")
    }
})

def liquibaseCommand(command) {
    tasks.register("runLiquibaseCommand", JavaExec) {
        if (isWindows) {
            classpath tasks.named("pathingLiquibaseJar").get().outputs.files
        } else {
            classpath sourceSets.main.runtimeClasspath
            classpath configurations.liquibaseRuntime
        }
        mainClass = "liquibase.integration.commandline.Main"

        args = [
            "--changeLogFile=src/main/resources/config/liquibase/changelog/" + buildTimestamp() +"_changelog.xml",
            "--referenceUsername=root",
            "--referencePassword=12345678",
            "--referenceUrl=jdbc:mysql://localhost:3306/Artemis?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC",
            "--username=root",
            "--password=12345678",
            "--url=jdbc:mysql://localhost:3306/Artemis700?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC",
            "--driver=com.mysql.cj.jdbc.Driver",
            command
        ]
    }.get().exec()
}

tasks.register("liquibaseDiffChangeLog", {
    dependsOn tasks.named("initPaths")
    doLast {
        liquibaseCommand("diffChangeLog")
    }
})

tasks.register("liquibaseClearChecksums", {
    dependsOn tasks.named("initPaths")
    doLast {
        liquibaseCommand("clearChecksums")
    }
})

tasks.register("liquibaseGenerateChangelog", {
    dependsOn tasks.named("initPaths")
    doLast {
        liquibaseCommand("generateChangeLog")
    }
})

static def buildTimestamp() {
    def date = new Date()
    def formattedDate = date.format("yyyyMMddHHmmss")
    return formattedDate
}

import org.gradle.internal.os.OperatingSystem

configurations {
    liquibase
}

dependencies {
    liquibase "org.liquibase.ext:liquibase-hibernate5:4.24.0"
}

def isWindows = OperatingSystem.current().isWindows()

if (isWindows) {
    tasks.register('pathingLiquibaseJar', Jar) {
        dependsOn configurations.liquibase
        archiveAppendix = 'pathingLiquibase'

        doFirst {
            manifest {
                attributes 'Class-Path': (sourceSets.main.runtimeClasspath + configurations.liquibase).collect {
                    it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/')
                }.join(' ')
            }
        }
    }
}

tasks.register('initPaths', {
    group = "liquibase"
    dependsOn tasks.named('compileJava')
    if (isWindows) {
        dependsOn tasks.named('pathingLiquibaseJar')
    }
})

def liquibaseCommand(command) {
    javaexec {
        if (isWindows) {
            classpath tasks.named('pathingLiquibaseJar').get().outputs.files
        } else {
            classpath sourceSets.main.runtimeClasspath
            classpath configurations.liquibase
        }
        main = "liquibase.integration.commandline.Main"

        args = [
             "--changeLogFile=src/main/resources/config/liquibase/changelog/" + buildTimestamp() +"_changelog.xml",
             "--referenceUrl=hibernate:spring:de.tum.in.www1.artemis.domain?dialect=org.hibernate.dialect.MySQL8Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy",
             "--username=root",
             "--password=",
             "--url=jdbc:mysql://localhost:3306/ArTEMiS?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC",
             "--driver=com.mysql.cj.jdbc.Driver",
             command
        ]
    }
}

tasks.register('liquibaseDiffChangeLog', {
    dependsOn tasks.named('initPaths')
    doLast {
        liquibaseCommand("diffChangeLog")
    }
})

tasks.register('liquibaseClearChecksums', {
    dependsOn tasks.named('initPaths')
    doLast {
        liquibaseCommand("clearChecksums")
    }
})

tasks.register('liquibaseGenerateChangelog', {
    dependsOn tasks.named('initPaths')
    doLast {
        liquibaseCommand("generateChangelog")
    }
})

static def buildTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

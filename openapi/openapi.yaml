openapi: 3.1.0
info:
  title: Artemis Application Server API
  contact: {name: Stephan Krusche, email: krusche@tum.de}
  version: 8.3.3
servers:
- {url: 'http://localhost:8080', description: Generated server url}
paths:
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/{tutorialGroupId}:
    delete:
      tags: [tutorial-group]
      operationId: delete
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: tutorialGroupId
        in: path
        required: true
        schema: {type: integer, format: int64}
      responses:
        '200': {description: OK}
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/{tutorialGroupId}/sessions/{sessionId}:
    delete:
      tags: [tutorial-group-session]
      operationId: deleteSession
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: tutorialGroupId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: sessionId
        in: path
        required: true
        schema: {type: integer, format: int64}
      responses:
        '200': {description: OK}
  ? /api/tutorialgroup/courses/{courseId}/tutorial-groups-configuration/{tutorialGroupsConfigurationId}/tutorial-free-periods/{tutorialGroupFreePeriodId}
  : delete:
      tags: [tutorial-group-free-period]
      operationId: delete_1
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: tutorialGroupsConfigurationId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: tutorialGroupFreePeriodId
        in: path
        required: true
        schema: {type: integer, format: int64}
      responses:
        '200': {description: OK}
  /api/tutorialgroup/courses/{courseId}/tutorial-groups:
    get:
      tags: [tutorial-group]
      operationId: getAllForCourse
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {type: array}
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/{tutorialGroupId}/register/{studentLogin}:
    post:
      tags: [tutorial-group]
      operationId: registerStudent
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: tutorialGroupId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: studentLogin
        in: path
        required: true
        schema: {type: string}
      responses:
        '200': {description: OK}
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/{tutorialGroupId}/register-multiple:
    post:
      tags: [tutorial-group]
      operationId: registerMultipleStudentsToTutorialGroup
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: tutorialGroupId
        in: path
        required: true
        schema: {type: integer, format: int64}
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items: {$ref: '#/components/schemas/Student'}
              uniqueItems: true
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Student'}
                uniqueItems: true
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/import:
    post:
      tags: [tutorial-group]
      operationId: importRegistrations
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items: {$ref: '#/components/schemas/TutorialGroupRegistrationImport'}
              uniqueItems: true
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/TutorialGroupRegistrationImport'}
  /api/hyperion/programming-exercises/{programmingExerciseId}/consistency-check:
    post:
      tags: [hyperion-review-and-refine]
      summary: Check exercise consistency
      description: Analyzes a programming exercise for consistency issues between
        problem statement, template code, solution code, and test cases
      operationId: checkExerciseConsistency
      parameters:
      - name: programmingExerciseId
        in: path
        description: ID of the programming exercise to analyze
        required: true
        schema: {type: integer, format: int64}
      responses:
        '200':
          description: Consistency check completed successfully
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ConsistencyCheckResponse'}
        '503':
          description: Hyperion service unavailable
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ConsistencyCheckResponse'}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ConsistencyCheckResponse'}
  /api/hyperion/courses/{courseId}/problem-statements/rewrite:
    post:
      tags: [hyperion-review-and-refine]
      summary: Rewrite problem statement
      description: Rewrites and improves a problem statement using AI assistance
      operationId: rewriteProblemStatement
      parameters:
      - name: courseId
        in: path
        description: ID of the course
        required: true
        schema: {type: integer, format: int64}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ProblemStatementRewriteRequest'}
        required: true
      responses:
        '200':
          description: Problem statement rewritten successfully
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ProblemStatementRewriteResponse'}
        '400':
          description: Invalid request body
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ProblemStatementRewriteResponse'}
        '503':
          description: Hyperion service unavailable
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ProblemStatementRewriteResponse'}
        '500':
          description: Internal server error
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ProblemStatementRewriteResponse'}
  /api/tutorialgroup/tutorial-groups/{tutorialGroupId}/title:
    get:
      tags: [tutorial-group]
      operationId: getTitle
      parameters:
      - name: tutorialGroupId
        in: path
        required: true
        schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {type: string}
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/language-values:
    get:
      tags: [tutorial-group]
      operationId: getUniqueLanguageValues
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {type: string}
                uniqueItems: true
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/export/json:
    get:
      tags: [tutorial-group]
      operationId: exportTutorialGroupsToJSON
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: fields
        in: query
        required: true
        schema:
          type: array
          items: {type: string}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/TutorialGroupExport'}
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/export/csv:
    get:
      tags: [tutorial-group]
      operationId: exportTutorialGroupsToCSV
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: fields
        in: query
        required: true
        schema:
          type: array
          items: {type: string}
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema: {type: string, format: binary}
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/campus-values:
    get:
      tags: [tutorial-group]
      operationId: getUniqueCampusValues
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {type: string}
                uniqueItems: true
  /api/tutorialgroup/courses/{courseId}/tutorial-groups/{tutorialGroupId}/deregister/{studentLogin}:
    delete:
      tags: [tutorial-group]
      operationId: deregisterStudent
      parameters:
      - name: courseId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: tutorialGroupId
        in: path
        required: true
        schema: {type: integer, format: int64}
      - name: studentLogin
        in: path
        required: true
        schema: {type: string}
      responses:
        '200': {description: OK}
components:
  schemas:
    ProblemStatementRewriteResponse:
      type: object
      description: Response containing rewritten problem statement
      properties:
        rewrittenText: {type: string, description: Improved problem statement text}
        improved: {type: boolean, description: Whether the text was actually improved,
          example: true}
      required: [improved, rewrittenText]
    Channel:
      type: object
      properties:
        type: {type: string}
        id: {type: integer, format: int64}
        creationDate: {type: string, format: date-time}
        lastMessageDate: {type: string, format: date-time}
        creator: {$ref: '#/components/schemas/ConversationUser'}
        lastReadDate: {type: string, format: date-time}
        unreadMessagesCount: {type: integer, format: int64}
        isFavorite: {type: boolean}
        isHidden: {type: boolean}
        isMuted: {type: boolean}
        isCreator: {type: boolean}
        isMember: {type: boolean}
        numberOfMembers: {type: integer, format: int32}
        name: {type: string}
        description: {type: string}
        topic: {type: string}
        isPublic: {type: boolean}
        isAnnouncementChannel: {type: boolean}
        isArchived: {type: boolean}
        isCourseWide: {type: boolean}
        hasChannelModerationRights: {type: boolean}
        isChannelModerator: {type: boolean}
        tutorialGroupId: {type: integer, format: int64}
        tutorialGroupTitle: {type: string}
        subType:
          type: string
          enum: [general, exercise, lecture, exam, feedbackDiscussion]
        subTypeReferenceId: {type: integer, format: int64}
        subTypeWithReferenceFromChannel: {$ref: '#/components/schemas/Channel', writeOnly: true}
    TutorialGroupStatus:
      type: object
      properties:
        status_explanation: {type: string}
    TutorialGroupRegistrationImport:
      type: object
      properties:
        title: {type: string}
        student: {$ref: '#/components/schemas/Student'}
        importSuccessful: {type: boolean}
        error:
          type: string
          enum: [NO_TITLE, NO_USER_FOUND, MULTIPLE_REGISTRATIONS]
        campus: {type: string}
        capacity: {type: integer, format: int32}
        language: {type: string}
        additionalInformation: {type: string}
        isOnline: {type: boolean}
    Student:
      type: object
      properties:
        login: {type: string, maxLength: 50, minLength: 0}
        firstName: {type: string, maxLength: 50, minLength: 0}
        lastName: {type: string, maxLength: 50, minLength: 0}
        registrationNumber: {type: string, maxLength: 10, minLength: 0}
        email: {type: string, maxLength: 100, minLength: 0}
    TutorialGroupUpdate:
      type: object
      properties:
        notificationText: {type: string, maxLength: 1000, minLength: 1}
        updateTutorialGroupChannelName: {type: boolean}
      required: [tutorialGroup]
    ConsistencyCheckResponse:
      type: object
      description: Response containing consistency check results
      properties:
        issues:
          type: array
          description: List of consistency issues found
          items: {$ref: '#/components/schemas/ConsistencyIssue'}
      required: [issues]
    TutorialGroupFreePeriodRequest:
      type: object
      properties:
        startDate: {type: string, format: date-time}
        endDate: {type: string, format: date-time}
        reason: {type: string}
      required: [endDate, startDate]
    ArtifactLocation:
      type: object
      description: Location information for artifacts
      properties:
        type:
          type: string
          description: Type of artifact
          enum: [PROBLEM_STATEMENT, TEMPLATE_REPOSITORY, SOLUTION_REPOSITORY, TESTS_REPOSITORY]
          example: PROBLEM_STATEMENT
        filePath: {type: string, description: 'Path to file, empty or problem_statement.md
            for problem statement', example: src/main/java/Main.java}
        startLine: {type: integer, format: int32, description: Start line number (1-based)}
        endLine: {type: integer, format: int32, description: End line number (1-based)}
      required: [endLine, filePath, startLine, type]
    ConsistencyIssue:
      type: object
      description: Individual consistency issue details
      properties:
        severity:
          type: string
          description: Severity of the issue
          enum: [LOW, MEDIUM, HIGH]
          example: HIGH
        category:
          type: string
          description: Category of the issue
          enum: [METHOD_RETURN_TYPE_MISMATCH, METHOD_PARAMETER_MISMATCH, CONSTRUCTOR_PARAMETER_MISMATCH,
            ATTRIBUTE_TYPE_MISMATCH, VISIBILITY_MISMATCH, IDENTIFIER_NAMING_INCONSISTENCY]
          example: METHOD_RETURN_TYPE_MISMATCH
        description: {type: string, description: Detailed description of the issue,
          example: Problem statement does not match test cases}
        suggestedFix: {type: string, description: Suggested fix for the issue, example: Update
            problem statement to clarify expected behavior}
        relatedLocations:
          type: array
          description: Related locations across artifacts
          items: {$ref: '#/components/schemas/ArtifactLocation'}
      required: [category, description, relatedLocations, severity, suggestedFix]
    TutorialGroupExport:
      type: object
      properties:
        id: {type: integer, format: int64}
        title: {type: string}
        dayOfWeek: {type: string}
        startTime: {type: string}
        endTime: {type: string}
        location: {type: string}
        campus: {type: string}
        language: {type: string}
        additionalInformation: {type: string}
        capacity: {type: integer, format: int32}
        isOnline: {type: boolean}
        students:
          type: array
          items: {$ref: '#/components/schemas/StudentExport'}
    ConversationUser:
      type: object
      properties:
        id: {type: integer, format: int64}
        login: {type: string}
        name: {type: string}
        firstName: {type: string}
        lastName: {type: string}
        imageUrl: {type: string}
        isInstructor: {type: boolean}
        isEditor: {type: boolean}
        isTeachingAssistant: {type: boolean}
        isStudent: {type: boolean}
        isChannelModerator: {type: boolean}
        isRequestingUser: {type: boolean}
    TutorialGroupSessionRequest:
      type: object
      properties:
        date: {type: string, format: date}
        startTime: {type: string}
        endTime: {type: string}
        location: {type: string, maxLength: 2000, minLength: 1}
      required: [date, endTime, startTime]
    ProblemStatementRewriteRequest:
      type: object
      description: Request containing the problem statement to rewrite
      properties:
        problemStatementText: {type: string, description: Original problem statement
            text to be improved, minLength: 1}
      required: [problemStatementText]
    StudentExport:
      type: object
      properties:
        registrationNumber: {type: string}
        firstName: {type: string}
        lastName: {type: string}

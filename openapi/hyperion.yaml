components:
  responses:
    UnauthorizedError:
      content:
        application/json:
          schema:
            properties:
              detail:
                type: string
            type: object
      description: Authentication failed - API key is missing or invalid
  schemas:
    ArtifactLocation:
      description: Location information for artifacts.
      properties:
        end_line:
          description: End line number (1-based)
          title: End Line
          type: integer
        file_path:
          description: Path to file, empty or problem_statement.md for problem statement
          title: File Path
          type: string
        start_line:
          description: Start line number (1-based)
          title: Start Line
          type: integer
        type:
          $ref: '#/components/schemas/ArtifactType'
          description: Type of artifact
      required:
      - type
      - file_path
      - start_line
      - end_line
      title: ArtifactLocation
      type: object
    ArtifactType:
      description: Artifact type enumeration.
      enum:
      - PROBLEM_STATEMENT
      - TEMPLATE_REPOSITORY
      - SOLUTION_REPOSITORY
      title: ArtifactType
      type: string
    BoundaryConditions:
      description: Exercise boundary conditions.
      properties:
        bonus_points:
          default: 0
          description: Bonus points available
          title: Bonus Points
          type: integer
        constraints:
          description: Additional constraints
          items:
            type: string
          title: Constraints
          type: array
        difficulty:
          description: Difficulty level
          title: Difficulty
          type: string
        points:
          description: Points awarded for completion
          title: Points
          type: integer
        programming_language:
          $ref: '#/components/schemas/app__creation_steps__step3_create_solution_repository__models__ProgrammingLanguage'
          description: Programming language for the exercise
        project_type:
          $ref: '#/components/schemas/ProjectType'
          description: Project type and build system
      required:
      - programming_language
      - project_type
      - difficulty
      - points
      title: BoundaryConditions
      type: object
    ComponentHealth:
      description: Health status of an individual system component.
      properties:
        details:
          nullable: true
      required:
      - status
      title: ComponentHealth
      type: object
    ConsistencyCheckRequest:
      description: Request model for consistency check
      properties:
        problem_statement:
          description: Problem statement to check
          title: Problem Statement
          type: string
        programming_language:
          $ref: '#/components/schemas/app__creation_steps__step8_review_and_refine__consistency_check__models__ProgrammingLanguage'
          description: Programming language for language-specific context rendering
        solution_repository:
          anyOf:
          - $ref: '#/components/schemas/Repository'
          - type: 'null'
          description: Solution repository to check (optional)
        template_repository:
          $ref: '#/components/schemas/Repository'
          description: Template repository to check
        test_repository:
          anyOf:
          - $ref: '#/components/schemas/Repository'
          - type: 'null'
          description: Test repository to check (optional)
      required:
      - problem_statement
      - template_repository
      - programming_language
      title: ConsistencyCheckRequest
      type: object
    ConsistencyCheckResponse:
      description: Response model for consistency check
      properties:
        issues:
          description: List of consistency issues found
          items:
            $ref: '#/components/schemas/ConsistencyIssue'
          title: Issues
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
          description: Response metadata
      required:
      - issues
      - metadata
      title: ConsistencyCheckResponse
      type: object
    ConsistencyIssue:
      description: Base class for consistency issues. Do not use directly, use subclasses
        instead.
      properties:
        category:
          description: Specific category of consistency issue
          title: Category
          type: string
        description:
          description: Clear explanation of the consistency issue
          title: Description
          type: string
        related_locations:
          description: Related locations across artifacts
          items:
            $ref: '#/components/schemas/ArtifactLocation'
          title: Related Locations
          type: array
        severity:
          $ref: '#/components/schemas/ConsistencyIssueSeverity'
          description: Student impact severity level
        suggested_fix:
          description: Actionable correction to resolve the issue
          title: Suggested Fix
          type: string
      required:
      - description
      - severity
      - category
      - related_locations
      - suggested_fix
      title: ConsistencyIssue
      type: object
    ConsistencyIssueSeverity:
      description: Severity levels for consistency issues.
      enum:
      - LOW
      - MEDIUM
      - HIGH
      title: ConsistencyIssueSeverity
      type: string
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HealthCheck:
      description: Response model for system health information.
      example:
        components:
          system:
            details:
              platform: macOS-14.3.1-arm64
            status: OK
        status: OK
        timestamp: '2025-08-01T14:40:51.244812Z'
        uptime_seconds: 3600
        version: 1.0.0
      properties:
        components:
          additionalProperties:
            $ref: '#/components/schemas/ComponentHealth'
          description: Status of individual components
          title: Components
          type: object
        status:
          description: Overall system status
          title: Status
          type: string
        timestamp:
          description: Time when health check was performed
          format: date-time
          title: Timestamp
          type: string
        uptime_seconds:
          description: Application uptime in seconds
          title: Uptime Seconds
          type: integer
        version:
          description: Application version
          title: Version
          type: string
      required:
      - status
      - version
      - uptime_seconds
      title: HealthCheck
      type: object
    Metadata:
      description: Metadata for requests and responses.
      properties:
        trace_id:
          description: UUID with LLM trace ID
          title: Trace Id
          type: string
      required:
      - trace_id
      title: Metadata
      type: object
    ProblemStatement:
      description: Problem statement definition.
      properties:
        description:
          description: Detailed problem description
          title: Description
          type: string
        short_title:
          description: Abbreviated title
          title: Short Title
          type: string
        title:
          description: Exercise title
          title: Title
          type: string
      required:
      - title
      - short_title
      - description
      title: ProblemStatement
      type: object
    ProjectType:
      description: Project type enumeration matching Artemis.
      enum:
      - maven_maven
      - plain_maven
      - plain
      - xcode
      - fact
      - gcc
      - plain_gradle
      - gradle_gradle
      - maven_blackbox
      title: ProjectType
      type: string
    Repository:
      description: Represents a collection of files that form a repository.
      properties:
        files:
          description: Files contained in the repository
          items:
            $ref: '#/components/schemas/RepositoryFile'
          title: Files
          type: array
      required:
      - files
      title: Repository
      type: object
    RepositoryFile:
      description: Represents a file in a repository with content.
      properties:
        content:
          description: File content
          title: Content
          type: string
        path:
          description: File path relative to the repository root
          title: Path
          type: string
      required:
      - path
      - content
      title: RepositoryFile
      type: object
    RewriteProblemStatementRequest:
      description: Request model for problem statement rewriting
      properties:
        text:
          description: Text to rewrite
          title: Text
          type: string
      required:
      - text
      title: RewriteProblemStatementRequest
      type: object
    RewriteProblemStatementResponse:
      description: Response model for problem statement rewriting
      properties:
        rewritten_text:
          description: Rewritten text
          title: Rewritten Text
          type: string
      required:
      - rewritten_text
      title: RewriteProblemStatementResponse
      type: object
    SolutionRepositoryCreatorRequest:
      description: Request for creating solution repository.
      properties:
        boundary_conditions:
          $ref: '#/components/schemas/BoundaryConditions'
          description: Exercise boundary conditions
        problem_statement:
          $ref: '#/components/schemas/ProblemStatement'
          description: Problem statement
      required:
      - boundary_conditions
      - problem_statement
      title: SolutionRepositoryCreatorRequest
      type: object
    SolutionRepositoryCreatorResponse:
      description: Response for solution repository creation.
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
          description: Response metadata
        repository:
          $ref: '#/components/schemas/Repository'
          description: Generated solution repository
      required:
      - repository
      - metadata
      title: SolutionRepositoryCreatorResponse
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
    app__creation_steps__step3_create_solution_repository__models__ProgrammingLanguage:
      description: Programming language enumeration matching Artemis.
      enum:
      - ''
      - java
      - python
      title: ProgrammingLanguage
      type: string
    app__creation_steps__step8_review_and_refine__consistency_check__models__ProgrammingLanguage:
      description: Programming language enumeration for consistency checking.
      enum:
      - java
      - python
      title: ProgrammingLanguage
      type: string
  securitySchemes:
    ApiKeyAuth:
      description: API key authentication
      in: header
      name: X-API-Key
      type: apiKey
info:
  contact:
    email: felixtj.dietrich@tum.de
    name: Felix T.J. Dietrich
  description: Hyperion is an AI-powered microservice that empowers instructors by
    generating and refining programming exercises. By integrating with modern learning
    management systems and CI build agents, Hyperion delivers context-aware suggestions
    and code stubs to enhance educational content.
  title: Hyperion
  version: 0.1.0
openapi: 3.1.0
paths:
  /create-solution-repository/:
    post:
      description: 'Create a solution repository based on boundary conditions and
        problem statement.


        This endpoint generates a complete working solution for a programming exercise,

        including source code, test files, and build configuration files.'
      operationId: create_solution_repository_create_solution_repository__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolutionRepositoryCreatorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionRepositoryCreatorResponse'
          description: Successful Response
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Solution Repository
      tags:
      - create-solution-repository
  /health:
    get:
      description: "## Perform a Health Check\n\nEndpoint to perform a health check\
        \ on the service. This endpoint can be used by:\n\n- Container orchestrators\
        \ like Docker or Kubernetes to ensure service health\n- Load balancers to\
        \ determine if the service should receive traffic\n- Monitoring tools to track\
        \ service availability\n\nThe endpoint returns information about system health\
        \ including uptime and version.\n\nReturns:\n    HealthCheck: Health status\
        \ information"
      operationId: get_health_health_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: Return HTTP Status Code 200 (OK) with system health information
      security: []
      summary: Perform a Health Check
      tags:
      - healthcheck
  /health/live:
    get:
      description: 'Simple liveness check endpoint that returns 200 OK when the service
        is running.

        This endpoint is lightweight and can be called frequently by infrastructure.'
      operationId: get_liveness_health_live_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Simple liveness check that always returns OK if service is
            running
      security: []
      summary: Liveness Check
      tags:
      - healthcheck
  /review-and-refine/consistency-check:
    post:
      description: 'Check consistency between problem statement, solution, template,
        and test repositories.


        Analyzes the provided exercise artifacts and identifies potential

        consistency issues across different artifact types.'
      operationId: consistency_check_review_and_refine_consistency_check_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsistencyCheckRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsistencyCheckResponse'
          description: Successful Response
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Consistency Check
      tags:
      - review-and-refine
  /review-and-refine/problem-statement-rewrite:
    post:
      description: 'Rewrite and improve a problem statement.


        Takes a problem statement text and returns an improved version

        with better clarity, structure, and pedagogical value.'
      operationId: problem_statement_rewrite_review_and_refine_problem_statement_rewrite_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewriteProblemStatementRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewriteProblemStatementResponse'
          description: Successful Response
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Problem Statement Rewrite
      tags:
      - review-and-refine
security:
- ApiKeyAuth: []

#!/usr/bin/env bash

########################################################################################################################
# Script:       artemis-server-cli                                                                                     #
#                                                                                                                      #
# Description:  Provide a Wrapper to conveniently perform common operations on Artemis Servers.                        #
#               This assumes a standardized server configuration and properly configured SSH access.                    #
#               Run artemis-server-cli -h for usage information                                                        #
#                                                                                                                      #
# Author:       Jan Philip Bernius                                                                                     #
# Email:        janphilip.bernius@tum.de                                                                               #
# GitHub:       @jpbernius                                                                                             #
#                                                                                                                      #
########################################################################################################################


# Function: Ask User for Confirmation, if -y flag is not used
#
# @param question
interactive=true
function user_confirmation {
    if [ $interactive = true ]; then
        echo $1
        read -p "Do you want to continue? [Y/n] " response
        if [[ ! $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
            echo "Aborted."
            exit 0
        fi
    fi
}

# Function: Perform Backup on Server
#
# @param host
# @param database (boolean)
# @param filesystem (boolean)
function backup {
    if [ $2 = false ] && [ $3 = false ]; then return 0; fi

    if [ $2 = true ] && [ $3 = true ]; then backup_scope="database and the filesystem"
    elif [ $2 = true ]; then backup_scope="database"
    elif [ $3 = true ]; then backup_scope="filesystem"
    fi

    user_confirmation "About to start a backup of the $backup_scope on remote server $1."

    CMD="sudo /opt/artemis/artemis-backup.sh -"
    if [ $2 = true ]; then CMD+="d"; fi
    if [ $3 = true ]; then CMD+="f"; fi

    ssh $1 $CMD
}

# Function: Perform Deployment to Server
# Deprecated: Use deploy_docker instead
#
# @param host
# @param war location
function deploy {
    user_confirmation "About to start a deployment of WAR File $2 on remote server $1"

    # Upload WAR
    scp $2 $1:~/artemis.war.new

    # Trigger Commands to replace and restart Artemis Application
    ssh $1 << COMMAND
chmod +x artemis.war.new
sudo mv ~/artemis.war.new /opt/artemis/artemis.war.new

sudo rm /opt/artemis/artemis.war.old

sudo systemctl stop artemis

sudo mv /opt/artemis/artemis.war /opt/artemis/artemis.war.old
sudo mv /opt/artemis/artemis.war.new /opt/artemis/artemis.war

sudo systemctl start artemis
COMMAND
}

# Function: Perform Deployment to Server via Docker
# Expects the artemis-docker.sh script to be present on the remote server
#
# @param deployment host
# @param gateway host
# @param pr tag
# @param pr branch
# @param deployment directory
function docker_deploy {
    user_confirmation "About to start a deployment of PR $3 ($4) on remote server $1 using gateway server $2"

    ssh -J "$2" -o "StrictHostKeyChecking=no" "$1" << COMMAND
cd $5
sudo /usr/bin/bash $5/artemis-docker.sh restart $3 $4
COMMAND
}

# Function: Show Server Logs using journalctl
#
# @param host
# @param follow log
# @param number of log lines to fetch
function logs {
    CMD="sudo journalctl -u artemis -n $3"
    if [ $2 = true ]; then CMD+=" -f"; fi

    ssh $1 $CMD
}

# Function: Check for -h Flag
#
# @param callback function to display help menu
# @param $@
function extract_help_flag {
    callback=$1; shift

    local OPTIND
    while getopts ":h" opt; do
        case ${opt} in
            h )
                $callback
                exit 0
                ;;
            \? )
                printf "Invalid Option: -$OPTARG \n\n" 1>&2
                $callback
                exit 1
                ;;
        esac
    done
    shift $((OPTIND -1))
}

# Function: Print general usage information
function general_help {
    cat << HELP
Usage:
  ./$(basename $0) <command> [options]

Commands:
  deploy                      Deploy to remote Artemis Server.
  docker-deploy               Deploy to remote Artemis Server.
  backup                      Perform on remote Artemis Server.
  logs                        Show Artemis Server logs.

General Options:
  -h                          Show help.
HELP
}

# Function: Print deploy usage information
function deploy_help {
    cat << HELP
Usage:
  ./$(basename $0) deploy <host> [options]

Options:
  <host>                      [user@]hostname
  -w <path>                   Path to WAR file.
  -b                          Perform Backup before deployment. (Requires -d and/or -f options.)
  -d                          Perform Database Backup before deployment. (Only if -b is present.)
  -f                          Perform Filesystem Backup before deployment. (Only if -b is present.)
  -y                          Automatic yes to prompts. Assume "yes" as answer to all prompts and run non-interactively.
HELP
}

# Function: Print docker-deploy usage information
function docker_deploy_help {
    cat << HELP
Usage:
  ./$(basename $0) docker-deploy <host> [options]

Options:
  <host>                      [user@]hostname
  -g                          Gateway [user@]hostname.
  -t                          Docker tag that should be deployed.
  -b                          GitHub branch that should be deployed.
  -d                          Deployment directory
  -y                          Automatic yes to prompts. Assume "yes" as answer to all prompts and run non-interactively.
HELP
}

# Function: Print backup usage information
function backup_help {
    cat << HELP
Usage:
  ./$(basename $0) backup <host> [options]

Options:
  <host>                      [user@]hostname
  -d                          Perform Database Backup.
  -f                          Perform Filesystem Backup.
  -y                          Automatic yes to prompts. Assume "yes" as answer to all prompts and run non-interactively.
HELP
}

# Function: Print logs usage information
function logs_help {
    cat << HELP
Usage:
  ./$(basename $0) logs <host> [options]

Options:
  <host>                      [user@]hostname
  -f                          Follow the journal.
  -n                          Number of journal entries to show
HELP
}

########################################################################################################################
# Subcommand Menus                                                                                                     #
########################################################################################################################


# Function: Display Backup Subcommand Menu
#
# @param $@
function backup_menu {
    extract_help_flag backup_help $@

    server=$1; shift
    # Handle missing server
    if [ -z "$server" ]
    then
        backup_help
        exit 1
    fi

    local database=false
    local filesystem=false

    local OPTIND
    while getopts ":hydf" opt; do
        case ${opt} in
            h )
                backup_help
                exit 0
                ;;
            y )
                interactive=false
                ;;
            d )
                database=true
                ;;
            f )
                filesystem=true
                ;;
            \? )
                printf "Invalid Option: -$OPTARG\n\n" 1>&2
                backup_help
                exit 1
                ;;
        esac
    done
    if [ $OPTIND -eq 1 ]; then
        printf "Invalid Option: backup requires an argument\n\n" 1>&2
        backup_help
        exit 1
    fi
    shift $((OPTIND -1))

    backup $server $database $filesystem
}

# Function: Display Deployment Subcommand Menu
#
# @param $@
function deploy_menu {
    extract_help_flag deploy_help $@

    server=$1; shift
    # Handle missing server
    if [ -z "$server" ]
    then
        deploy_help
        exit 1
    fi

    local war=''
    local backup=false
    local database=false
    local filesystem=false

    local OPTIND
    while getopts ":hyw:bdf" opt; do
        case ${opt} in
            h )
                deploy_help
                exit 0
                ;;
            y )
                interactive=false
                ;;
            w )
                war=$OPTARG
                ;;
            b )
                backup=true
                ;;
            d )
                database=true
                ;;
            f )
                filesystem=true
                ;;
            \? )
                printf "Invalid Option: -$OPTARG\n\n" 1>&2
                backup_help
                exit 1
                ;;
        esac
    done
    if [ $OPTIND -eq 1 ]; then
        printf "Invalid Option: backup requires an argument\n\n" 1>&2
        backup_help
        exit 1
    fi
    shift $((OPTIND -1))

    if [ -z $war ] || [ ! -f $war ]; then
        printf "Require Path to WAR file to perform deployment.\n\n" 1>&2
        backup_help
        exit 1
    fi

    if [ $backup = true ]; then
        backup $server $database $filesystem
    fi

    deploy $server $war
}

# Function: Display Docker Deployment Subcommand Menu
#
# @param $@
function docker_deploy_menu {
    extract_help_flag docker_deploy_help $@

    server=$1; shift
    # Handle missing server
    if [ -z "$server" ]
    then
        docker_deploy_help
        exit 1
    fi

    local gateway=''
    local tag=''
    local branch=''
    local directory=''

    local OPTIND
    while getopts ":hyg:t:b:d:" opt; do
        case ${opt} in
            h )
                deploy_help
                exit 0
                ;;
            y )
                interactive=false
                ;;
            g )
                gateway=$OPTARG
                ;;
            t )
                tag=$OPTARG
                ;;
            b )
                branch=$OPTARG
                ;;
            d )
                directory=$OPTARG
                ;;
            \? )
                printf "Invalid Option: -$OPTARG\n\n" 1>&2
                docker_deploy_help
                exit 1
                ;;
        esac
    done
    if [ $OPTIND -eq 1 ]; then
        printf "Invalid Option: backup requires an argument\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi
    shift $((OPTIND -1))

    if [ -z "$gateway" ]; then
        printf "Require gateway to perform deployment.\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi

    if [ -z "$tag" ]; then
        printf "Require docker tag to perform deployment.\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi

    if [ -z "$branch" ]; then
        printf "Require branch name to perform deployment.\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi

    if [ -z "$directory" ]; then
        printf "Require deployment directory to perform deployment.\n\n" 1>&2
        docker_deploy_help
        exit 1
    fi

    docker_deploy "$server" "$gateway" "$tag" "$branch" "$directory"
}

# Function: Display Logs Subcommand Menu
#
# @param $@
function logs_menu {
    extract_help_flag logs_help $@

    server=$1; shift
    # Handle missing server
    if [ -z "$server" ]
    then
        logs_help
        exit 1
    fi

    local follow=false
    local lines=100

    local OPTIND
    while getopts ":hfn:" opt; do
        case ${opt} in
            h )
                backup_help
                exit 0
                ;;
            f )
                follow=true
                ;;
            n )
                lines=$OPTARG
                ;;
            \? )
                printf "Invalid Option: -$OPTARG\n\n" 1>&2
                logs_help
                exit 1
                ;;
        esac
    done
    shift $((OPTIND -1))

    logs $server $follow $lines
}


########################################################################################################################
# Main Menu                                                                                                            #
########################################################################################################################

# Parse options to the `artemis-server-cli` command
extract_help_flag general_help $@

# read subcommand `artemis-server-cli subcommand server` in variable and remove base command from argument list
subcommand=$1; shift

# Handle empty subcommand
if [ -z $subcommand ]; then
    general_help
    exit 1
fi

case "$subcommand" in
    deploy)
        deploy_menu $@
        ;;
    docker-deploy)
        docker_deploy_menu $@
        ;;
    backup)
        backup_menu $@
        ;;
    logs)
        logs_menu $@
        ;;
    *)
        printf "Invalid Command: $subcommand\n\n" 1>&2
        general_help
        exit 1
        ;;
esac

{
    "allowComplaintsForAutomaticAssessments": false,
    "allowManualFeedbackRequests": false,
    "allowOfflineIde": false,
    "allowOnlineEditor": true,
    "assessmentDueDateError": false,
    "assessmentType": "AUTOMATIC",
    "bonusPoints": 0,
    "checkoutSolutionRepository": false,
    "dueDateError": false,
    "exampleSolutionPublicationDateError": false,
    "exampleSolutionPublicationDateWarning": false,
    "includedInOverallScore": "INCLUDED_COMPLETELY",
    "isAtLeastEditor": false,
    "isAtLeastInstructor": false,
    "isAtLeastTutor": false,
    "maxPoints": 10,
    "mode": "INDIVIDUAL",
    "noVersionControlAndContinuousIntegrationAvailable": false,
    "packageName": "<Insert package name here>",
    "presentationScoreEnabled": false,
    "problemStatement": "# Sorting with the Strategy Pattern\n\nIn this exercise, we want to implement sorting algorithms and choose them based on runtime specific variables.\n\n### Part 1: Sorting\n\nFirst, we need to implement two sorting algorithms, in this case `MergeSort` and `BubbleSort`.\n\n**You have the following tasks:**\n\n1. [task][Implement Bubble Sort](test_bubble_sort)\nImplement the method `perform_sort(List<int>)` in the class `BubbleSort`. Make sure to follow the Bubble Sort algorithm exactly.\n\n2. [task][Implement Merge Sort](test_merge_sort)\nImplement the method `perform_sort(List<int>)` in the class `MergeSort`. Make sure to follow the Merge Sort algorithm exactly.\n\n### Part 2: Strategy Pattern\n\nWe want the application to apply different algorithms for sorting a `List` of `Int` objects.\nUse the strategy pattern to select the right sorting algorithm at runtime.\n\n**You have the following tasks:**\n\n1. [task][SortStrategy Interface](test_sort_strategy_class,test_sort_strategy_methods)\nCreate a `SortStrategy` abstract class with an abstract method and adjust the sorting algorithms so that they inherit from this class.\n\n2. [task][Context Class](test_context_attributes,test_context_methods)\nCreate and implement a `Context` class following the below class diagram\n\n3. [task][Context Policy](test_policy_constructor,test_policy_attributes,test_policy_methods)\nCreate and implement a `Policy` class following the below class diagram with a simple configuration mechanism:\n\n    1. [task][Select MergeSort](test_merge_sort_struct,test_merge_sort_for_big_list)\n    Select `MergeSort` when the List has more than 10 dates.\n\n    2. [task][Select BubbleSort](test_bubble_sort_struct,test_bubble_sort_for_small_list)\n    Select `BubbleSort` when the List has less or equal 10 dates.\n\n4. Complete the `Client` class which demonstrates switching between two strategies at runtime.\n\n@startuml\n\nclass Client {\n}\n\nclass Policy {\n  <color:testsColor(test_policy_methods)>+configure()</color>\n}\n\nclass Context {\n  <color:testsColor(test_context_attributes)>numbers: List<int></color>\n  <color:testsColor(test_context_methods)>+sort()</color>\n}\n\nabstract class SortStrategy {\n  <color:testsColor(test_sort_strategy_methods)>+perform_sort(List<int>)</color>\n}\n\nclass BubbleSort {\n  <color:testsColor(test_bubble_sort_struct)>+performSort(List<int>)</color>\n}\n\nclass MergeSort {\n  <color:testsColor(test_merge_sort_struct)>+perform_sort(List<int>)</color>\n}\n\nMergeSort -up-|> SortStrategy #testsColor(test_merge_sort_class)\nBubbleSort -up-|> SortStrategy #testsColor(test_bubble_sort_class)\nPolicy -right-> Context #testsColor(test_policy_attributes): context\nContext -right-> SortStrategy #testsColor(test_context_attributes): sortAlgorithm\nClient .down.> Policy\nClient .down.> Context\n\nhide empty fields\nhide empty methods\n\n@enduml\n\n\n### Part 3: Optional Challenges\n\n(These are not tested)\n\n1. Create a new class `QuickSort` that inherits from `SortStrategy` and implement the Quick Sort algorithm.\n\n2. Think about a useful decision in `Policy` when to use the new `QuickSort` algorithm.\n",
    "programmingLanguage": "PYTHON",
    "publishBuildPlanUrl": false,
    "secondCorrectionEnabled": false,
    "shortName": "<Insert programming exercise short name here>",
    "showTestNamesToStudents": false,
    "solutionParticipation": {
        "type": "solution"
    },
    "startDateError": false,
    "staticCodeAnalysisEnabled": false,
    "studentAssignedTeamIdComputed": false,
    "teamMode": false,
    "templateParticipation": {
        "type": "template"
    },
    "testwiseCoverageEnabled": false,
    "title": "<Insert programming exercise title here>",
    "type": "programming"
}

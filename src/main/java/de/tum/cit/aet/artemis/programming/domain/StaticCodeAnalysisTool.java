package de.tum.cit.aet.artemis.programming.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * Enumeration for supported static code analysis tools
 */
public enum StaticCodeAnalysisTool {

    SPOTBUGS(ProgrammingLanguage.JAVA, "spotbugs:spotbugs", "spotbugsXml.xml"), CHECKSTYLE(ProgrammingLanguage.JAVA, "checkstyle:checkstyle", "checkstyle-result.xml"),
    PMD(ProgrammingLanguage.JAVA, "pmd:pmd", "pmd.xml"), PMD_CPD(ProgrammingLanguage.JAVA, "pmd:cpd", "cpd.xml"), SWIFTLINT(ProgrammingLanguage.SWIFT, "", "swiftlint-result.xml"),
    GCC(ProgrammingLanguage.C, "", "gcc.xml");

    private final ProgrammingLanguage language;

    private final String command;

    private final String filePattern;

    StaticCodeAnalysisTool(ProgrammingLanguage language, String command, String filePattern) {
        this.language = language;
        this.command = command;
        this.filePattern = filePattern;
    }

    public String getTask() {
        return this.command;
    }

    public String getFilePattern() {
        return this.filePattern;
    }

    /**
     * Returns all static code analysis tools supporting the given programming language.
     *
     * @param language Programming language for which the static code analysis tools should be returned
     * @return List of static code analysis
     */
    public static List<StaticCodeAnalysisTool> getToolsForProgrammingLanguage(ProgrammingLanguage language) {
        List<StaticCodeAnalysisTool> tools = new ArrayList<>();
        for (var tool : StaticCodeAnalysisTool.values()) {
            if (tool.language == language) {
                tools.add(tool);
            }
        }
        return tools;
    }

    /**
     * Finds a tool by its file pattern (the xml file generated by the tool).
     *
     * @param fileName the name of the xml file generated by the tool
     * @return Optional with the corresponding tool or empty optional if no appropriate tool was found
     */
    public static Optional<StaticCodeAnalysisTool> getToolByFilePattern(String fileName) {
        for (StaticCodeAnalysisTool tool : StaticCodeAnalysisTool.values()) {
            if (Objects.equals(fileName, tool.filePattern)) {
                return Optional.of(tool);
            }
        }
        return Optional.empty();
    }

}

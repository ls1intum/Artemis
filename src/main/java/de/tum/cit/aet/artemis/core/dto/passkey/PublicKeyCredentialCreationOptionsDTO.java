package de.tum.cit.aet.artemis.core.dto.passkey;

import java.io.Serializable;
import java.time.Duration;
import java.util.List;

import org.springframework.security.web.webauthn.api.AuthenticationExtensionsClientInputs;
import org.springframework.security.web.webauthn.api.Bytes;
import org.springframework.security.web.webauthn.api.PublicKeyCredentialCreationOptions;
import org.springframework.security.web.webauthn.api.PublicKeyCredentialDescriptor;
import org.springframework.security.web.webauthn.api.PublicKeyCredentialUserEntity;

import com.fasterxml.jackson.annotation.JsonInclude;

/**
 * Serializable Data Transfer Object (DTO) for {@link PublicKeyCredentialCreationOptions}, used for synchronizing
 * WebAuthn registration requests across multiple nodes (e.g., via Hazelcast). The original class is not serializable,
 * so this DTO serves as an intermediate representation that can be serialized/deserialized.
 *
 * <p>
 * Fields correspond to the properties of a WebAuthn credential creation request and support
 * round-trip conversion to and from {@link PublicKeyCredentialCreationOptions}.
 *
 * @param challenge              A cryptographic challenge generated by the server to prevent replay attacks.
 * @param user                   Information about the user being registered, such as ID, name, and display name.
 * @param attestation            Indicates the attestation conveyance preference (e.g., none, indirect, direct).
 * @param rp                     Information about the relying party (RP), typically the server.
 * @param pubKeyCredParams       A list of acceptable public key credential parameters and algorithms.
 * @param authenticatorSelection Criteria to guide authenticator selection (e.g., platform vs. roaming).
 * @param excludeCredentials     A list of credentials to exclude, to prevent re-registration of existing credentials.
 * @param extensions             Optional client extension inputs for additional registration behavior.
 * @param timeout                Timeout value (in milliseconds) for the registration ceremony.
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public record PublicKeyCredentialCreationOptionsDTO(Bytes challenge, PublicKeyCredentialUserEntity user, ArtemisAttestationConveyancePreferenceDTO attestation,
        ArtemisPublicKeyCredentialRpEntityDTO rp, List<ArtemisPublicKeyCredentialParametersDTO> pubKeyCredParams, ArtemisAuthenticatorSelectionCriteriaDTO authenticatorSelection,
        List<PublicKeyCredentialDescriptor> excludeCredentials, AuthenticationExtensionsClientInputs extensions, Duration timeout) implements Serializable {

    /**
     * Converts this DTO to a {@link PublicKeyCredentialCreationOptions} object to be used
     * by the WebAuthn API during credential creation.
     *
     * @return a fully constructed {@link PublicKeyCredentialCreationOptions} based on this DTO's data.
     */
    public PublicKeyCredentialCreationOptions toPublicKeyCredentialCreationOptions() {
        //@formatter:off
        return PublicKeyCredentialCreationOptions.builder()
            .challenge(challenge())
            .user(user())
            .attestation(attestation() != null
                ? attestation().toAttestationConveyancePreference()
                : null)
            .rp(rp() != null
                ? rp().toPublicKeyCredentialRpEntity()
                : null)
            .pubKeyCredParams(pubKeyCredParams() != null
                ? ArtemisPublicKeyCredentialParametersDTO.convertToPublicKeyCredentialParameters(pubKeyCredParams())
                : null)
            .authenticatorSelection(authenticatorSelection() != null
                ? authenticatorSelection().toAuthenticatorSelectionCriteria()
                : null)
            .excludeCredentials(excludeCredentials())
            .extensions(extensions())
            .timeout(timeout())
            .build();
        //@formatter:on
    }

    /**
     * Converts a {@link PublicKeyCredentialCreationOptions} object into a serializable DTO.
     * This is used when persisting or distributing WebAuthn registration data across nodes.
     *
     * @param options the {@link PublicKeyCredentialCreationOptions} object to convert.
     * @return a corresponding {@link PublicKeyCredentialCreationOptionsDTO}.
     */
    public static PublicKeyCredentialCreationOptionsDTO publicKeyCredentialCreationOptionsToDTO(PublicKeyCredentialCreationOptions options) {
        //@formatter:off
        return new PublicKeyCredentialCreationOptionsDTO(
            options.getChallenge(),
            options.getUser(),
            new ArtemisAttestationConveyancePreferenceDTO(options.getAttestation().getValue()),
            new ArtemisPublicKeyCredentialRpEntityDTO(options.getRp().getName(), options.getRp().getId()),
            options.getPubKeyCredParams().stream()
                .map(param -> new ArtemisPublicKeyCredentialParametersDTO(param.getType(), param.getAlg().getValue()))
                .toList(),
            new ArtemisAuthenticatorSelectionCriteriaDTO(
                options.getAuthenticatorSelection().getAuthenticatorAttachment(),
                options.getAuthenticatorSelection().getResidentKey().toString(),
                options.getAuthenticatorSelection().getUserVerification()),
            options.getExcludeCredentials(),
            options.getExtensions(),
            options.getTimeout()
        );
        //@formatter:on
    }
}

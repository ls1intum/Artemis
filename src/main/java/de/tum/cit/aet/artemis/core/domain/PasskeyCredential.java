package de.tum.cit.aet.artemis.core.domain;

import java.time.Instant;
import java.util.Set;

import jakarta.persistence.Column;
import jakarta.persistence.Convert;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

import org.springframework.security.web.webauthn.api.AuthenticatorTransport;
import org.springframework.security.web.webauthn.api.Bytes;
import org.springframework.security.web.webauthn.api.CredentialRecord;
import org.springframework.security.web.webauthn.api.ImmutableCredentialRecord;
import org.springframework.security.web.webauthn.api.PublicKeyCose;
import org.springframework.security.web.webauthn.api.PublicKeyCredentialType;

import de.tum.cit.aet.artemis.core.domain.converter.AuthenticatorTransportConverter;
import de.tum.cit.aet.artemis.core.domain.converter.BytesConverter;
import de.tum.cit.aet.artemis.core.domain.converter.PublicKeyCoseConverter;

@Entity
@Table(name = "passkey_credential")
public class PasskeyCredential extends AbstractAuditingEntity {

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(name = "label")
    private String label;

    @Enumerated(EnumType.STRING)
    @Column(name = "credential_type")
    private PasskeyType credentialType;

    @Column(name = "credential_id")
    private String credentialId;

    @Column(name = "public_key_cose")
    @Convert(converter = PublicKeyCoseConverter.class)
    private PublicKeyCose publicKeyCose;

    /**
     * Used to prevent replay attacks by keeping track of the number of signatures made with this credential.
     * However, shared authenticators always return 0 to prevent false alarms. For USB devices an incrementing counter is expected.
     */
    @Column(name = "signature_count")
    private long signatureCount;

    /**
     * Indicates whether the credential is initialized for user verification (UV). This is only relevant for platform authenticators.
     * If uvInitialized is true the user was verified via Fingerprint / FaceId / Device PIN or Password.
     */
    @Column(name = "uv_initialized")
    private boolean uvInitialized;

    /**
     * Describes how the authenticator communicates with the client device (implications on MitM attacks, reliability, etc.).
     */
    @Column(name = "transports")
    @Convert(converter = AuthenticatorTransportConverter.class)
    private Set<AuthenticatorTransport> transports;

    /**
     * If true, credential backups are allowed (lockout protection)
     */
    @Column(name = "backup_eligible")
    private boolean backupEligible;

    /**
     * True indicates the credential is backed up and can be recovered.
     */
    @Column(name = "backup_state")
    private boolean backupState;

    /**
     * Generated by the client on registration, contains information about the authenticator.
     * For more info see {@link com.webauthn4j.data.attestation.AttestationObject}
     */
    @Column(name = "attestation_object")
    @Convert(converter = BytesConverter.class)
    private Bytes attestationObject;

    @Column(name = "last_used")
    private Instant lastUsed;

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public PasskeyType getCredentialType() {
        return credentialType;
    }

    public void setCredentialType(PasskeyType credentialType) {
        this.credentialType = credentialType;
    }

    public String getCredentialId() {
        return credentialId;
    }

    public void setCredentialId(String credentialId) {
        this.credentialId = credentialId;
    }

    public PublicKeyCose getPublicKeyCose() {
        return publicKeyCose;
    }

    public void setPublicKeyCose(PublicKeyCose publicKeyCose) {
        this.publicKeyCose = publicKeyCose;
    }

    public long getSignatureCount() {
        return signatureCount;
    }

    public void setSignatureCount(long signatureCount) {
        this.signatureCount = signatureCount;
    }

    public boolean getUvInitialized() {
        return uvInitialized;
    }

    public void setUvInitialized(boolean uvInitialized) {
        this.uvInitialized = uvInitialized;
    }

    public Set<AuthenticatorTransport> getTransports() {
        return transports;
    }

    public void setTransports(Set<AuthenticatorTransport> transports) {
        this.transports = transports;
    }

    public boolean getBackupEligible() {
        return backupEligible;
    }

    public void setBackupEligible(boolean backupEligible) {
        this.backupEligible = backupEligible;
    }

    public boolean getBackupState() {
        return backupState;
    }

    public void setBackupState(boolean backupState) {
        this.backupState = backupState;
    }

    public Bytes getAttestationObject() {
        return attestationObject;
    }

    public void setAttestationObject(Bytes attestationObject) {
        this.attestationObject = attestationObject;
    }

    public Instant getLastUsed() {
        return lastUsed;
    }

    public void setLastUsed(Instant lastUsed) {
        this.lastUsed = lastUsed;
    }

    public CredentialRecord toCredentialRecord() {
        // @formatter:off
        return ImmutableCredentialRecord.builder()
            .userEntityUserId(getUser().getExternalId())
            .label(getLabel())
            .credentialType(PublicKeyCredentialType.valueOf(getCredentialType().label()))
            .credentialId(Bytes.fromBase64(getCredentialId()))
            .publicKey(getPublicKeyCose())
            .signatureCount(getSignatureCount())
            .uvInitialized(getUvInitialized())
            .transports(getTransports())
            .backupEligible(getBackupEligible())
            .backupState(getBackupState())
            .attestationObject(getAttestationObject())
            .lastUsed(getLastUsed())
            .created(getCreatedDate())
            .build();
        // @formatter:on
    }
}

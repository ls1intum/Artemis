<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog https://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">

    <changeSet id="20250810231000-create-separate-participations-for-quiz-practice-submissions"
               author="KonstantinKissel">
        <sql>
            CREATE
            TEMP TABLE temp_original_participations_to_split (
                original_participation_id BIGINT PRIMARY KEY,
                student_id BIGINT,
                exercise_id BIGINT,
                initialization_state VARCHAR(255),
                initialization_date TIMESTAMP WITH TIME ZONE
            );
            CREATE INDEX idx_tops_student_exercise ON temp_original_participations_to_split (student_id, exercise_id);

            INSERT INTO temp_original_participations_to_split (original_participation_id, student_id, exercise_id,
                                                               initialization_state, initialization_date)
            SELECT p.id, p.student_id, p.exercise_id, p.initialization_state, p.initialization_date
            FROM participation p
                     JOIN exercise e ON p.exercise_id = e.id
            WHERE p.discriminator = 'SP'
              AND e.discriminator = 'Q'
              AND p.test_run = FALSE
              AND p.id = (SELECT MIN(p_inner.id)
                          FROM participation p_inner
                          WHERE p_inner.student_id = p.student_id
                            AND p_inner.exercise_id = p.exercise_id
                            AND p_inner.discriminator = 'SP'
                            AND p_inner.test_run = FALSE)
              AND EXISTS (SELECT 1
                          FROM submission s
                                   INNER JOIN result r ON s.id = r.submission_id
                          WHERE s.participation_id = p.id
                            AND r.rated = FALSE);

            INSERT INTO participation (discriminator, student_id, exercise_id, initialization_state,
                                       initialization_date, test_run)
            SELECT 'SP', tops.student_id, tops.exercise_id, tops.initialization_state, tops.initialization_date, TRUE
            FROM temp_original_participations_to_split tops;

            UPDATE submission s
            SET participation_id = p_new.id FROM temp_original_participations_to_split tops
            JOIN participation p_new
            ON p_new.student_id = tops.student_id
                AND p_new.exercise_id = tops.exercise_id
                AND p_new.test_run = TRUE
                INNER JOIN result r ON s.id = r.submission_id
            WHERE s.participation_id = tops.original_participation_id
              AND r.rated = FALSE;

        </sql>
        <rollback>
            CREATE
            TEMP TABLE temp_rollback_mapping (
            test_run_participation_id BIGINT PRIMARY KEY,
            first_normal_participation_id BIGINT
            );
            CREATE INDEX idx_trm_first_normal ON temp_rollback_mapping (first_normal_participation_id);

            INSERT INTO temp_rollback_mapping (test_run_participation_id, first_normal_participation_id)
            SELECT p_test.id                             AS test_run_participation_id,
                   (SELECT MIN(p_normal.id)
                    FROM participation p_normal
                    WHERE p_normal.student_id = p_test.student_id
                      AND p_normal.exercise_id = p_test.exercise_id
                      AND p_normal.test_run = FALSE
                      AND p_normal.discriminator = 'SP') AS first_normal_participation_id
            FROM participation p_test
                     JOIN exercise e ON p_test.exercise_id = e.id
            WHERE p_test.test_run = TRUE
              AND p_test.discriminator = 'SP'
              AND e.discriminator = 'Q';

            UPDATE submission s
            SET participation_id = trm.first_normal_participation_id FROM temp_rollback_mapping trm
            WHERE s.participation_id = trm.test_run_participation_id
              AND trm.first_normal_participation_id IS NOT NULL;

            DELETE
            FROM participation p USING temp_rollback_mapping trm
            WHERE p.id = trm.test_run_participation_id
              AND trm.first_normal_participation_id IS NOT NULL;
        </rollback>
    </changeSet>
</databaseChangeLog>
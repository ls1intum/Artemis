<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog https://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
    <changeSet id="20250621162700-01" author="krusche">
        <!-- run only when data exists -->
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
                FROM plagiarism_result
                WHERE discriminator = 'ModelingPlagiarismResult';
            </sqlCheck>
        </preConditions>

        <!-- ──────────────── 1. collect IDs (no deletes yet) ──────────── -->
        <sql>
            /* modeling results */
            CREATE TEMPORARY TABLE tmp_modeling_results AS
            SELECT id
            FROM plagiarism_result
            WHERE discriminator = 'ModelingPlagiarismResult';

            /* comparisons of those results */
            CREATE TEMPORARY TABLE tmp_comparisons AS
            SELECT id,
                   submission_a_id,
                   submission_b_id
            FROM plagiarism_comparison
            WHERE plagiarism_result_id IN (SELECT id FROM tmp_modeling_results);

            /* submissions referenced by the comparisons */
            CREATE TEMPORARY TABLE tmp_submissions (id BIGINT PRIMARY KEY);

            INSERT INTO tmp_submissions (id)
            SELECT submission_a_id
            FROM   tmp_comparisons;

            INSERT INTO tmp_submissions (id)
            SELECT submission_b_id
            FROM   tmp_comparisons;

            /* plagiarism cases of those submissions */
            CREATE TEMPORARY TABLE tmp_cases AS
            SELECT DISTINCT plagiarism_case_id AS id
            FROM plagiarism_submission
            WHERE plagiarism_case_id IS NOT NULL
              AND id IN (SELECT id FROM tmp_submissions);

            /* posts inside those cases */
            CREATE TEMPORARY TABLE tmp_posts AS
            SELECT id
            FROM post
            WHERE plagiarism_case_id IN (SELECT id FROM tmp_cases);

            /* answer-posts of those posts */
            CREATE TEMPORARY TABLE tmp_answer_posts AS
            SELECT id
            FROM answer_post
            WHERE post_id IN (SELECT id FROM tmp_posts);

            /* reactions belonging to posts or answer-posts */
            CREATE TEMPORARY TABLE tmp_reactions AS
            SELECT id
            FROM reaction
            WHERE post_id IN (SELECT id FROM tmp_posts)
               OR answer_post_id IN (SELECT id FROM tmp_answer_posts);
        </sql>

        <!-- ──────────────── 2. delete in dependency order ─────────────── -->
        <sql>
            /* reactions */
            DELETE FROM reaction
            WHERE id IN (SELECT id FROM tmp_reactions);

            /* answer-posts */
            DELETE FROM answer_post
            WHERE id IN (SELECT id FROM tmp_answer_posts);

            /* posts */
            DELETE FROM post
            WHERE id IN (SELECT id FROM tmp_posts);

            /* submission elements */
            DELETE FROM plagiarism_submission_element
            WHERE plagiarism_submission_id IN (SELECT id FROM tmp_submissions);

            /* ──► BREAK the circular FK before any row is removed */
            UPDATE plagiarism_submission
            SET    plagiarism_comparison_id = NULL
            WHERE  plagiarism_comparison_id IN (SELECT id FROM tmp_comparisons);

            /* comparisons */
            DELETE FROM plagiarism_comparison
            WHERE id IN (SELECT id FROM tmp_comparisons);

            /* submissions */
            DELETE FROM plagiarism_submission
            WHERE id IN (SELECT id FROM tmp_submissions);

            /* cases */
            DELETE FROM plagiarism_case
            WHERE id IN (SELECT id FROM tmp_cases);

            /* similarity-distribution */
            DELETE FROM plagiarism_result_similarity_distribution
            WHERE plagiarism_result_id IN (SELECT id FROM tmp_modeling_results);

            /* modeling results themselves */
            DELETE FROM plagiarism_result
            WHERE id IN (SELECT id FROM tmp_modeling_results);
        </sql>

        <!-- ──────────────── 3. tidy up temp tables (optional) ─────────── -->
        <sql>
            DROP TABLE IF EXISTS
                tmp_reactions,
                tmp_answer_posts,
                tmp_posts,
                tmp_cases,
                tmp_submissions,
                tmp_comparisons,
                tmp_modeling_results;
        </sql>
    </changeSet>

    <changeSet id="20250621162700-02" author="krusche">
        <!-- delete unnecessary database columns -->
        <preConditions onFail="MARK_RAN">
            <columnExists tableName="plagiarism_result"             columnName="discriminator"/>
            <columnExists tableName="plagiarism_submission_element" columnName="token_type"/>
            <columnExists tableName="plagiarism_submission_element" columnName="discriminator"/>
        </preConditions>

        <!-- plagiarism_result.discriminator -->
        <dropColumn tableName="plagiarism_result" columnName="discriminator"/>

        <!-- plagiarism_submission_element.token_type -->
        <dropColumn tableName="plagiarism_submission_element" columnName="token_type"/>

        <!-- plagiarism_submission_element.discriminator -->
        <dropColumn tableName="plagiarism_submission_element" columnName="discriminator"/>
    </changeSet>
</databaseChangeLog>

<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:pro="http://www.liquibase.org/xml/ns/pro" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-3.9.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd">
    <changeSet author="argertboja" id="20210920225828-1">
        <sql>
            <!--This query finds all feedbacks which need a migration and prepares all the required
            information to create all the missing text blocks such as text, first_index, end_index,
            submission_id to which these text blocks belong to, type defined as MANUAL, the feedback_id
            which is used to update the reference and the text block id which is computed as follows:
            sha1(submission_id;start_index-end_index;text)
            -->
            CREATE TEMPORARY TABLE feedbacks_to_migrate
            SELECT
                f.reference AS text,
                POSITION(f.reference IN s.text) AS start_index,
                POSITION(f.reference IN s.text) + LENGTH(f.reference) AS end_index,
                r.submission_id,
                'MANUAL' AS TYPE,
                f.id AS feedback_id,
                SHA1(CONCAT(r.submission_id, ';', POSITION(f.reference IN s.text), '-', POSITION(f.reference IN s.text) + LENGTH(f.reference), ';', f.reference)) AS tb_id
            FROM
                exercise e
                INNER JOIN participation p ON e.id = p.exercise_id
                INNER JOIN submission s ON p.id = s.participation_id
                INNER JOIN result r ON p.id = r.participation_id AND r.submission_id = s.id
                INNER JOIN feedback f ON r.id = f.result_id
                LEFT JOIN text_block b ON s.id = b.submission_id AND f.reference = b.id
            WHERE
                e.discriminator = 'T'
                AND f.reference IS NOT NULL
                AND f.reference NOT IN (
                    SELECT
                    id FROM text_block
                );

            <!--This query finds all feedbacks which do not belong to any participation however they
            are used for tutorial purposes-->
            INSERT INTO feedbacks_to_migrate (text, start_index, end_index, submission_id, TYPE, feedback_id, tb_id)
            SELECT
                f.reference,
                POSITION(f.reference IN s.text),
                POSITION(f.reference IN s.text) + LENGTH(f.reference),
                r.submission_id,
                'MANUAL',
                f.id,
                SHA1(CONCAT(r.submission_id, ';', POSITION(f.reference IN s.text), '-', POSITION(f.reference IN s.text) + LENGTH(f.reference), ';', f.reference))
            FROM
                feedback f
                INNER JOIN result r ON f.result_id = r.id
                INNER JOIN submission s ON r.submission_id = s.id
            WHERE
                r.participation_id IS NULL
                AND s.participation_id IS NULL
                AND length(f.reference) > 255;

            <!--This query creates all missing text blocks-->
            INSERT INTO text_block (id, text, start_index, end_index, submission_id, TYPE)
            SELECT
                ftm.tb_id,
                ftm.text,
                ftm.start_index,
                ftm.end_index,
                ftm.submission_id,
                ftm.type
            FROM
                feedbacks_to_migrate ftm;

            <!--This query updates all feedback references-->
            UPDATE
                feedback f
                INNER JOIN feedbacks_to_migrate ftm ON f.id = ftm.feedback_id
            SET
                f.reference = ftm.tb_id
            WHERE
                f.id = ftm.feedback_id;

            <!--These last two queries find and delete all left over feedbacks which haven't been removed before-->
            CREATE TEMPORARY TABLE leftover_feedbacks
            SELECT
                f.id AS feedback_id
            FROM
                feedback f
                INNER JOIN result r ON f.result_id = r.id
            WHERE
                r.participation_id IS NULL
                AND r.submission_id IS NULL;

            DELETE FROM feedback
            WHERE id IN (
                SELECT
                    feedback_id FROM leftover_feedbacks
                )
                OR result_id IS NULL;
        </sql>
    </changeSet>
    <changeSet author="argertboja" id="20210920225828-2">
        <!--Shorten the reference column length to 255 chars-->
        <modifyDataType tableName="feedback" columnName="reference" newDataType="varchar(255)"/>
        <!--Create an index on reference column of feedback-->
        <createIndex indexName="idx_reference" tableName="feedback">
            <column name="reference"/>
        </createIndex>
    </changeSet>
</databaseChangeLog>

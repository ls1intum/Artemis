# ===================================================================
# Artemis specific properties
# ===================================================================

artemis:
    course-archives-path: ./exports/courses         # a folder in which archived courses and exams are stored.
    legal-path: ./legal                             # a folder in which legal documents (imprint and privacy statements) are stored.
    repo-clone-path: ./repos                        # a folder in which git repos for the online code editor are stored. In a multi node setup, this folder should be in a shared file system area (e.g. based on NFS), so that user can access the same files over multiple nodes
    repo-download-clone-path: ./repos-download      # a temporary folder, in which git repos are downloaded that are immediately deleted afterwards (e.g. exports, plagiarism checks), should NOT be in a shared file system area
    data-export-path: ./data-exports                # a folder in which data exports are stored
    bcrypt-salt-rounds: 11  # The number of salt rounds for the bcrypt password hashing. Lower numbers make it faster but more unsecure and vice versa.
                            # Please use the bcrypt benchmark tool to determine the best number of rounds for your system. https://github.com/ls1intum/bcrypt-Benchmark
    user-management:
        use-external: true
        password-reset:
            credential-provider: <provider> # The credential provider which users can log in though (e.g. TUMonline)
            links: # The password reset links for different languages
                en: '<link>'
                de: '<link>'
        external:
            url: https://jira.ase.in.tum.de
            user: <username>        # e.g. ga12abc
            password: <password>
            admin-group-name: tumuser
        ldap:                       # the whole section is optional: whether user details (such as the registration number) can be obtained from a LDAP service
            url: <url>
            user-dn: <user-dn>
            password: <password>
            base: <base>
            allowed-username-pattern: '^([a-z]{2}\d{2}[a-z]{3})$'    # example for a TUM identifier, e.g. ab12cde
        internal-admin:
            username: artemis_admin
            password: artemis_admin
            email: admin@localhost
        registration:               # the whole section is optional: whether user can register in Artemis
            enabled: false
            allowed-email-pattern: '[a-zA-Z0-9_\-\.\+]+@(tum\.de|in\.tum\.de|mytum\.de)'
            allowed-email-pattern-readable: '@tum.de, @in.tum.de, @mytum.de'
            cleanup-time-minutes: 60 # The amount of time until non-activated accounts are deleted automatically
        accept-terms: false     # whether users have to accept terms before they can log in, from a privacy point of view this is not needed during education, therefore the default value is false
        course-registration: # Deprecated: replaced by 'course-enrollment'
            # If both 'course-registration' and 'course-enrollment' are configured, the system will favorize the values specified under 'course-enrollment'
            # the whole section is optional: whether there is a restriction for the self-registration of students in courses
            allowed-username-pattern: '^([a-z]{2}\d{2}[a-z]{3})$'    # example for a TUM identifier, e.g. ab12cde
        course-enrollment: # the whole section is optional: whether there is a restriction for the self-registration of students in courses
            allowed-username-pattern: '^([a-z]{2}\d{2}[a-z]{3})$'    # example for a TUM identifier, e.g. ab12cde
        login:
            account-name: TUM                   # optional: customization for the welcome page "please sign in with your <account-name> account"
    version-control:
        url: https://bitbucket.ase.in.tum.de
        user: <username>                # e.g. ga12abc
        password: <password>
        # token: <token>                # VCS API token giving Artemis full Admin access.
        ssh-template-clone-url: ssh://git@bitbucket.ase.in.tum.de:7999/    # Url Stem for cloning via ssh, for gitlab use 'ssh://git@artemistest2gitlab.ase.in.tum.de:2222/'
        ssh-keys-url-path: /plugins/servlet/ssh/account/keys  # Url Path to access a users ssh keys, for gitlab this is '/-/profile/keys'
#        ssh-private-key-folder-path: <ssh-private-key-folder-path>       # the path to the folder in which the private ssh key file (e.g. id_rsa) is stored that can be used to clone git repos on the version control server
#        ssh-private-key-password: <ssh-private-key-password>        # the password for the private ssh key
        default-branch: main            # The branch that should be used as default branch for all newly created repositories. This does NOT have to be equal to the default branch of the VCS
        version-control-access-token: false # only for Gitlab setups: a Gitlab-API token can be generated for each user and used as part of the Git clone URL shown to students to allow for password-less Git operations via HTTP
    continuous-integration:
        user: <username>                # e.g. ga12abc
        password: <password>
        token: <token>                  # Enter a valid token generated in Bamboo giving Artemis full Admin access
        url: https://bamboo.ase.in.tum.de
        # Some CI systems, like Jenkins, offer a specific token that gets checked against any incoming notifications
        # from a VCS trying to trigger a build plan. Only if the notification request contains the correct token, the plan
        # is triggered. This can be seen as an alternative to sending an authenticated request to a REST API and then
        # triggering the plan.
        # In the case of Artemis, this is only really needed for the Jenkins + GitLab setup, since the GitLab plugin in
        # Jenkins only allows triggering the Jenkins jobs using such a token. Furthermore, in this case, the value of the
        # hudson.util.Secret is stored in the build plan, so you also have to specify this encrypted string here and NOT the actual token value itself!
        # You can get this by GETting any job.xml for a job with an activated GitLab step and your token value of choice.
        secret-push-token: <token hash>
        # Key of the saved credentials for the VCS service
        # Bamboo, GitLab CI: not needed
        # Jenkins: You have to specify the key from the credentials page in Jenkins under which the user and
        #          password for the VCS are stored
        vcs-credentials: <credentials key>
        # Key of the credentials for the Artemis notification token
        # Bamboo: not needed
        # Jenkins: You have to specify the key from the credentials page in Jenkins under which the authentication-token is stored
        artemis-authentication-token-key: <credentials key>
        # The actual value of the notification token to check against in Artemis. This is the token that gets send with
        # every request the CI system makes to Artemis containing a new result after a build.
        # Bamboo, GitLab CI: The token value you use for the Server Notification Plugin
        # Jenkins: The token value you use for the Server Notification Plugin and is stored under the notification-token credential above
        artemis-authentication-token-value: <token>
        build-timeout: 30 # Does cancel jenkins builds after 30 minutes to remove build that get stuck
        notification-plugin: "ls1tum/artemis-notification-plugin:1.0.0" # Docker image for the generic notification plugin. This value is set in an CI variable in GitLab CI.
    git:
        name: Artemis
        email: artemis.in@tum.de
    athena:
        url: http://localhost:5000
        secret: abcdef12345
    apollon:
        conversion-service-url: http://localhost:8080

    scheduling:  # these values are cron expressions. To generate one, you can use e.g. https://www.freeformatter.com/cron-expression-generator-quartz.html
        programming-exercises-cleanup-time: 0 0 3 * * * # every day at 3am
        data-export-creation-time: 0 0 4 * * * # every day at 4am

    data-export:
        days-between-data-exports: 14

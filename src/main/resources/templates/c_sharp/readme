# Sorting with the Strategy Pattern

In this exercise, we want to implement sorting algorithms and choose them based on runtime specific variables.

### Part 1: Sorting

First, we need to implement two sorting algorithms, in this case `MergeSort` and `BubbleSort`.

**You have the following tasks:**

1. [task][Implement Bubble Sort](TestBubbleSort)
Implement the method `PerformSort(List<DateTime>)` in the class `BubbleSort`. Make sure to follow the Bubble Sort algorithm exactly.

2. [task][Implement Merge Sort](TestMergeSort)
Implement the method `PerformSort(List<DateTime>)` in the class `MergeSort`. Make sure to follow the Merge Sort algorithm exactly.

### Part 2: Strategy Pattern

We want the application to apply different algorithms for sorting a `List` of `DateTime` objects.
Use the strategy pattern to select the right sorting algorithm at runtime.
Implement public readable and writable C# properties for the UML attributes and associations.

**You have the following tasks:**

1. [task][ISortStrategy Interface](TestISortStrategyType,TestISortStrategyMethods,TestMergeSortInterface,TestBubbleSortInterface)
Create a `ISortStrategy` interface and adjust the sorting algorithms so that they implement this interface.

2. [task][Context Class](TestContextType,TestContextPropertyDates,TestContextPropertySortAlgorithm,TestContextMethods)
Create and implement a `Context` class following the below class diagram

3. [task][Context Policy](TestPolicyType,TestPolicyConstructor,TestPolicyPropertyContext,TestPolicyMethods)
Create and implement a `Policy` class following the below class diagram with a simple configuration mechanism:

    1. [task][Select MergeSort](TestUseMergeSortForBigList)
    Select `MergeSort` when the List has more than 10 dates.

    2. [task][Select BubbleSort](TestUseBubbleSortForSmallList)
    Select `BubbleSort` when the List has less or equal 10 dates.

4. Complete the `Client` class which demonstrates switching between two strategies at runtime.

@startuml

class Client {
}

class Policy ##testsColor(TestPolicyType) {
<color:testsColor(TestPolicyConstructor)>+Policy() <<constructor>></color>
<color:testsColor(TestPolicyMethods)>+Configure()</color>
}

class Context ##testsColor(TestContextType) {
<color:testsColor(TestContextPropertyDates)>-dates: List<DateTime></color>
<color:testsColor(TestContextMethods)>+Sort()</color>
}

interface ISortStrategy ##testsColor(TestISortStrategyType) {
<color:testsColor(TestISortStrategyMethods)>+PerformSort(List<DateTime>)</color>
}

class BubbleSort {
<color:testsColor(TestBubbleSort)>+PerformSort(List<DateTime>)</color>
}

class MergeSort {
<color:testsColor(TestMergeSort)>+PerformSort(List<DateTime>)</color>
}

MergeSort -up-|> ISortStrategy #testsColor(TestMergeSortInterface)
BubbleSort -up-|> ISortStrategy #testsColor(TestBubbleSortInterface)
Policy -right-> Context #testsColor(TestPolicyPropertyContext): context
Context -right-> ISortStrategy #testsColor(TestContextPropertySortAlgorithm): sortAlgorithm
Client .down.> Policy
Client .down.> Context

hide empty fields
hide empty methods

@enduml


### Part 3: Optional Challenges

(These are not tested)

1. Create a new class `QuickSort` that implements `SortStrategy` and implement the Quick Sort algorithm.

2. Make the method `PerformSort(List<DateTime>)` generic, so that other objects can also be sorted by the same method.
**Hint:** Have a look at C# Generics and the interface `IComparable`.

3. Think about a useful decision in `Policy` when to use the new `QuickSort` algorithm.

# Do It Once, Do It Twice, Do It Thrice!

Your task is to implement a function of type `(Int,Int) -> [(Int,Int)] -> [(Int,Int)]` which takes a range `(i,j)` and a list `xs` of pairs `(x,y)` representing points in the euclidean plane as arguments.
The function should select only those elements in `xs` whose x-component lies in the inclusive range $$[i,j]$$.
It should then reflect the remaining points along the x-axis and return the resulting list.

Implement the function in three different ways:

1. [task][List Comprehension](Properties.Checked by QuickCheck.Testing A against sample solution, Properties.Checked by SmallCheck.Testing filtering in A, Properties.Checked by SmallCheck.Testing mapping in A,  Unit Tests.Testing selectAndReflectA (0,0) [])
   As a list comprehension without using any higher-order functions or recursion.
   Call this function `selectAndReflectA`.

2. [task][Recursion](Properties.Checked by QuickCheck.Testing B against sample solution, Properties.Checked by SmallCheck.Testing filtering in B, Properties.Checked by SmallCheck.Testing mapping in B,  Unit Tests.Testing selectAndReflectB (0,1) [(0,0)])
   As a recursive function with the help of pattern matching.
   You are not allowed to use list comprehensions or higher-order functions.
   Call this function `selectAndReflectB`.

3. [task][Higher-Order Functions](Properties.Checked by QuickCheck.Testing C against sample solution, Properties.Checked by SmallCheck.Testing filtering in C, Properties.Checked by SmallCheck.Testing mapping in C,  Unit Tests.Testing selectAndReflectC (0,1) [(-1,-1)])
   Use higher-order functions (e.g. `map`, `filter`, etc.) but no recursion or list comprehensions.
   Call this function `selectAndReflectC`.

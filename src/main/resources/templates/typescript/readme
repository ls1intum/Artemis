# Sorting with the Strategy Pattern

In this exercise, we want to implement sorting algorithms and choose them based on runtime specific variables.

### Part 1: Sorting

First, we need to implement two sorting algorithms, in this case `MergeSort` and `BubbleSort`.

**You have the following tasks:**

1. [task][Implement Bubble Sort](structural_BubbleSort_has_method,behavior_BubbleSort_should_sort_correctly)
Implement the method `performSort(Date[])` in the class `BubbleSort`. Make sure to follow the Bubble Sort algorithm exactly.

2. [task][Implement Merge Sort](structural_MergeSort_has_method,behavior_MergeSort_should_sort_correctly)
Implement the method `performSort(Date[])` in the class `MergeSort`. Make sure to follow the Merge Sort algorithm exactly.

### Part 2: Strategy Pattern

We want the application to apply different algorithms for sorting an Array of `Date` objects.
Use the strategy pattern to select the right sorting algorithm at runtime.

**You have the following tasks:**

1. [task][Context Class](structural_Context_has_properties,structural_Context_has_methods)
Create and implement a `Context` class following the below class diagram.
Add `get` and `set` accessors for the attribute.

2. [task][Context Policy](structural_Policy_has_properties,structural_Policy_has_methods)
Create and implement a `Policy` class following the below class diagram.
Add `get` and `set` accessors for the attribute.
`Policy` should implement a simple configuration mechanism:

    1. [task][Select MergeSort](behavior_Policy_uses_MergeSort_for_big_list)
    Select `MergeSort` when the List has more than 10 dates.

    2. [task][Select BubbleSort](behavior_Policy_uses_BubbleSort_for_small_list)
    Select `BubbleSort` when the List has less or equal 10 dates.

3. Complete the `main()` function which demonstrates switching between two strategies at runtime.

@startuml

class Policy {
  +Policy(Context) <<constructor>>
  <color:testsColor(structural_Policy_has_methods)>+configure()</color>
}

class Context {
  <color:testsColor(structural_Context_has_properties)>-dates: Date[]</color>
  <color:testsColor(structural_Context_has_methods)>+sort()</color>
}

interface SortStrategy {
  +performSort(Date[])
}

class BubbleSort {
  <color:testsColor(behavior_BubbleSort_should_sort_correctly)>+performSort(Date[])</color>
}

class MergeSort {
  <color:testsColor(behavior_MergeSort_should_sort_correctly)>+performSort(Date[])</color>
}

MergeSort -up-|> SortStrategy #testsColor(structural_MergeSort_has_method)
BubbleSort -up-|> SortStrategy #testsColor(structural_BubbleSort_has_method)
Policy -right-> Context #testsColor(structural_Policy_has_properties): context
Context -right-> SortStrategy #testsColor(structural_Context_has_properties): sortAlgorithm

hide empty fields
hide empty methods

@enduml


### Part 3: Optional Challenges

(These are not tested)

1. Create a new class `QuickSort` that implements `SortStrategy` and implement the Quick Sort algorithm.

2. Think about a useful decision in `Policy` when to use the new `QuickSort` algorithm.

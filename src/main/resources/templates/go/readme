# Sorting with the Strategy Pattern

In this exercise, we want to implement sorting algorithms and choose them based on runtime specific variables.

### Part 1: Sorting

First, we need to implement two sorting algorithms, in this case `MergeSort` and `BubbleSort`.

**You have the following tasks:**

1. [task][Implement Bubble Sort](artemis/testing/test/structural.TestBubbleSort,artemis/testing/test/behavior.TestBubbleSortSortsCorrectly)
Implement the method `PerformSort([]time.Time)` in the class `BubbleSort`. Make sure to follow the Bubble Sort algorithm exactly.

2. [task][Implement Merge Sort](artemis/testing/test/structural.TestMergeSort,artemis/testing/test/behavior.TestMergeSortSortsCorrectly)
Implement the method `PerformSort([]time.Time)` in the class `MergeSort`. Make sure to follow the Merge Sort algorithm exactly.

### Part 2: Strategy Pattern

We want the application to apply different algorithms for sorting a slice of `time.Time` objects.
Use the strategy pattern to select the right sorting algorithm at runtime.
Implement exported getters and setters for the UML attributes and associations.

**You have the following tasks:**

1. SortStrategy Interface
Create a `SortStrategy` interface and adjust the sorting algorithms so that they implement this interface.

2. [task][Context Class](artemis/testing/test/structural.TestContext)
Create and implement a `Context` class following the below class diagram

3. [task][Context Policy](artemis/testing/test/structural.TestPolicy)
Create and implement a `Policy` class following the below class diagram with a simple configuration mechanism:

    1. [task][Select MergeSort](artemis/testing/test/behavior.TestUseMergeSortForBigList)
    Select `MergeSort` when the slice has more than 10 dates.

    2. [task][Select BubbleSort](artemis/testing/test/behavior.TestUseBubbleSortForSmallList)
    Select `BubbleSort` when the slice has less or equal 10 dates.

4. Complete the `Client` class which demonstrates switching between two strategies at runtime.

@startuml

class Client {
}

class Policy ##testsColor(artemis/testing/test/structural.TestPolicy) {
  +NewPolicy() <<constructor>>
  <color:testsColor(artemis/testing/test/behavior.TestUseMergeSortForBigList,artemis/testing/test/behavior.TestUseMergeSortForBigList)>+Configure()</color>
}

class Context ##testsColor(artemis/testing/test/structural.TestContext) {
  -dates: []time.Time
  +NewContext() <<constructor>>
  +Sort()
}

interface SortStrategy {
  +PerformSort([]time.Time)
}

class BubbleSort ##testsColor(artemis/testing/test/structural.TestBubbleSort) {
  +NewBubbleSort() <<constructor>>
  <color:testsColor(artemis/testing/test/behavior.TestBubbleSort)>+PerformSort([]time.Time)</color>
}

class MergeSort ##testsColor(artemis/testing/test/structural.TestMergeSort) {
  +NewMergeSort() <<constructor>>
  <color:testsColor(artemis/testing/test/behavior.TestMergeSort)>+PerformSort([]time.Time)</color>
}

MergeSort -up-|> SortStrategy
BubbleSort -up-|> SortStrategy
Policy -right-> Context #testsColor(artemis/testing/test/structural.TestPolicy): context
Context -right-> SortStrategy #testsColor(artemis/testing/test/structural.TestContext): sortAlgorithm
Client .down.> Policy
Client .down.> Context

hide empty fields
hide empty methods

@enduml


### Part 3: Optional Challenges

(These are not tested)

1. Create a new class `QuickSort` that implements `SortStrategy` and implement the Quick Sort algorithm.

2. Think about a useful decision in `Policy` when to use the new `QuickSort` algorithm.

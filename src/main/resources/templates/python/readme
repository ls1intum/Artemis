# Sorting with the Strategy Pattern

In this exercise, we want to implement sorting algorithms and choose them based on runtime specific variables.

### Part 1: Sorting

First, we need to implement two sorting algorithms, in this case `MergeSort` and `BubbleSort`.

**You have the following tasks:**

1. [task][Implement Bubble Sort](test_bubble_sort)
Implement the method `perform_sort(List<int>)` in the class `BubbleSort`. Make sure to follow the Bubble Sort algorithm exactly.

2. [task][Implement Merge Sort](test_merge_sort)
Implement the method `perform_sort(List<int>)` in the class `MergeSort`. Make sure to follow the Merge Sort algorithm exactly.

### Part 2: Strategy Pattern

We want the application to apply different algorithms for sorting a `List` of `Int` objects.
Use the strategy pattern to select the right sorting algorithm at runtime.

**You have the following tasks:**

1. [task][SortStrategy Interface](test_sort_strategy_class,test_sort_strategy_methods)
Create a `SortStrategy` abstract class with an abstract method and adjust the sorting algorithms so that they inherit from this class.

2. [task][Context Class](test_context_attributes,test_context_methods)
Create and implement a `Context` class following the below class diagram

3. [task][Context Policy](test_policy_constructor,test_policy_attributes,test_policy_methods)
Create and implement a `Policy` class following the below class diagram with a simple configuration mechanism:

    1. [task][Select MergeSort](test_merge_sort_struct,test_merge_sort_for_big_list)
    Select `MergeSort` when the List has more than 10 dates.

    2. [task][Select BubbleSort](test_bubble_sort_struct,test_bubble_sort_for_small_list)
    Select `BubbleSort` when the List has less or equal 10 dates.

4. Complete the `Client` class which demonstrates switching between two strategies at runtime.

@startuml

class Client {
}

class Policy {
  <color:testsColor(test_policy_methods)>+configure()</color>
}

class Context {
  <color:testsColor(test_context_attributes)>numbers: List<int></color>
  <color:testsColor(test_context_methods)>+sort()</color>
}

abstract class SortStrategy {
  <color:testsColor(test_sort_strategy_methods)>+perform_sort(List<int>)</color>
}

class BubbleSort {
  <color:testsColor(test_bubble_sort_struct)>+performSort(List<int>)</color>
}

class MergeSort {
  <color:testsColor(test_merge_sort_struct)>+perform_sort(List<int>)</color>
}

MergeSort -up-|> SortStrategy #testsColor(test_merge_sort_class)
BubbleSort -up-|> SortStrategy #testsColor(test_bubble_sort_class)
Policy -right-> Context #testsColor(test_policy_attributes): context
Context -right-> SortStrategy #testsColor(test_context_attributes): sortAlgorithm
Client .down.> Policy
Client .down.> Context

hide empty fields
hide empty methods

@enduml


### Part 3: Optional Challenges

(These are not tested)

1. Create a new class `QuickSort` that inherits from `SortStrategy` and implement the Quick Sort algorithm.

2. Think about a useful decision in `Policy` when to use the new `QuickSort` algorithm.

# Sorting with the Strategy Pattern

In this exercise, we want to implement sorting algorithms and choose them based on runtime specific variables.

### Part 1: Sorting

First, we need to implement two sorting algorithms, in this case `MergeSort` and `BubbleSort`.

**You have the following tasks:**

1. [task][Implement Bubble Sort](test_bubble_sort_sorts)
Implement the method `perform_sort(input: Array[Date])` in the class `BubbleSort`. Make sure to follow the Bubble Sort algorithm exactly.

2. [task][Implement Merge Sort](test_merge_sort_sorts)
Implement the method `perform_sort(input: Array[Date])` in the class `MergeSort`. Make sure to follow the Merge Sort algorithm exactly.

### Part 2: Strategy Pattern

We want the application to apply different algorithms for sorting an `Array` of `Date` objects.
Use the strategy pattern to select the right sorting algorithm at runtime.

**You have the following tasks:**

1. [task][Context Class](test_context_structure)
Create and implement a `Context` class in `context.rb` following the class diagram below.
Add read and write accessors for the attributes and associations.

2. [task][Context Policy](test_policy_structure)
Create and implement a `Policy` class in `policy.rb` following the class diagram below.
Add read and write accessors for the attributes and associations.
`Policy` should implement a simple configuration mechanism:

    1. [task][Select MergeSort](test_use_merge_sort_for_big_list)
    Select `MergeSort` when the Array has more than 10 dates.

    2. [task][Select BubbleSort](test_use_bubble_sort_for_small_list)
    Select `BubbleSort` when the Array has less or equal 10 dates.

3. Complete the `Client` class which demonstrates switching between two strategies at runtime.

@startuml

class Client {
}

class Policy ##testsColor(test_policy_structure) {
  +configure()
}

class Context ##testsColor(test_context_structure) {
  -dates: Array[Date]
  +sort()
}

interface SortStrategy {
  +perform_sort(input: Array[Date])
}

class BubbleSort {
  <color:testsColor(test_bubble_sort_sorts)>+perform_sort(input: Array[Date])</color>
}

class MergeSort {
  <color:testsColor(test_merge_sort_sorts)>+perform_sort(input: Array[Date])</color>
}

MergeSort -up-|> SortStrategy
BubbleSort -up-|> SortStrategy
Policy -right-> Context #testsColor(test_policy_structure): context
Context -right-> SortStrategy #testsColor(test_context_structure): sort_algorithm
Client .down.> Policy
Client .down.> Context

hide empty fields
hide empty methods

@enduml


### Part 3: Optional Challenges

(These are not tested)

1. Create a new class `QuickSort` and implement the Quick Sort algorithm.

2. Make the method `perform_sort(input: Array[Date])` not depend on `Date` objects, so that other objects can also be sorted by the same method.
**Hint:** Have a look at the module `Comparable`.

3. Think about a useful decision in `Policy` when to use the new `QuickSort` algorithm.

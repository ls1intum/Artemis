// ARTEMIS: JenkinsPipeline

pipeline {
        options {
            timeout(time: #jenkinsTimeout, unit: 'MINUTES')
        }
        agent {
            docker {
                image '#dockerImage'
                label 'docker'
            }
        }
        stages {
            stage('Checkout') {
                steps {
                    dir('#testsCheckoutPath') {
                        checkout([$class: 'GitSCM', branches: [[name: '**']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '#gitCredentials', name: 'tests', url: '#testRepository']]])
                    }
                    dir('#assignmentCheckoutPath') {
                        checkout([$class: 'GitSCM', branches: [[name: '**']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '#gitCredentials', name: 'assignment', url: '#assignmentRepository']]])
                    }
                }
            }
            stage('Build') {
                steps {
                    timestamps {
                        sh  '''
                            cd $WORKSPACE
                            # Updating assignment and test-reports ownership...
                            chown artemis_user:artemis_user assignment/ -R
                            rm -rf test-reports
                            mkdir test-reports
                            chown artemis_user:artemis_user test-reports/ -R

                            # assignment
                            cd tests
                            REQ_FILE=requirements.txt
                            if [ -f "$REQ_FILE" ]; then
                                pip3 install --user -r requirements.txt
                            else
                                echo "$REQ_FILE does not exist"
                            fi
                            exit 0
                            '''
                        sh  '''
                            #!/usr/bin/env bash

                            shadowFilePath="../tests/testUtils/c/shadow_exec.c"

                            foundIncludeDirs=`grep -m 1 'INCLUDEDIRS\s*=' assignment/Makefile`

                            foundSource=`grep -m 1 'SOURCE\s*=' assignment/Makefile`
                            foundSource="$foundSource $shadowFilePath"

                            rm -f assignment/GNUmakefile
                            rm -f assignment/makefile

                            cp -f tests/Makefile assignment/Makefile || exit 2
                            sed -i "s~\bINCLUDEDIRS\s*=.*~${foundIncludeDirs}~; s~\bSOURCE\s*=.*~${foundSource}~" assignment/Makefile
                            '''
                        sh  '''
                            #!/bin/bash

                            gcc -c -Wall assignment/*.c || error=true
                            if [ ! $error ]
                            then
                                # Actual build process:
                                cd tests
                                python3 Tests.py s
                                rm Tests.py
                                rm -rf ./tests
                                exit 0
                            else
                                # Compilaton error
                                exit 1
                            fi
                            '''
                    }
                }
            }
        }
        post {
            cleanup {
                sh  '''
                    if [ -e test-reports/tests-results.xml ]
                    then
                        sed -i 's/\x1b//g' test-reports/tests-results.xml
                        sed -i 's/<skipped/<error/g' test-reports/tests-results.xml
                        sed -i 's/<\/skipped>/<\/error>/g' test-reports/tests-results.xml
                    fi
                    mv test-reports results
                    '''
                sendTestResults credentialsId: '#jenkinsNotificationToken', notificationUrl: '#notificationsUrl'
                cleanWs()
            }
        }
}

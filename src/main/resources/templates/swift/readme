# Sorting with the Strategy Pattern

In this exercise, we want to implement sorting algorithms and choose them based on runtime specific variables.

### Part 1: Sorting

First, we need to implement two sorting algorithms, in this case `MergeSort` and `BubbleSort`.

**You have the following tasks:**

1. [task][Implement Bubble Sort](testBubbleSort)
Implement the method `performSort([Date])` in the class `BubbleSort`. Make sure to follow the Bubble Sort algorithm exactly.

2. [task][Implement Merge Sort](testMergeSort)
Implement the method `performSort([Date])` in the class `MergeSort`. Make sure to follow the Merge Sort algorithm exactly.

### Part 2: Strategy Pattern

We want the application to apply different algorithms for sorting an `Array` of `Date` objects.
Use the strategy pattern to select the right sorting algorithm at runtime.

**You have the following tasks:**

1. [task][SortStrategy Protocol](testClassSortStrategy,testMethodsSortStrategy)
Create a `SortStrategy` protocol and adjust the sorting algorithms so that they implement this protocol.

2. [task][Context Class](testClassContext,testAttributesContext,testMethodsContext)
Create and implement a `Context` class following the below class diagram

3. [task][Context Policy](testClassPolicy,testAttributesPolicy,testMethodsPolicy)
Create and implement a `Policy` class following the below class diagram with a simple configuration mechanism:

    1. **Select MergeSort**
    Select `MergeSort` when the Array has more than 10 dates.

    2. **Select BubbleSort**
    Select `BubbleSort` when the Array has less or equal 10 dates.

4. Complete the `Client` class which demonstrates switching between two strategies at runtime.

@startuml

class Client {
}

class Policy {
  +configure()
}

class Context {
  -dates: [Date]
  +sort()
}

interface SortStrategy {
  +performSort([Date])
}

class BubbleSort {
  +performSort([Date])
}

class MergeSort {
  +performSort([Date])
}

MergeSort -up-|> SortStrategy
BubbleSort -up-|> SortStrategy
Policy -right-> Context : context
Context -right-> SortStrategy : sortAlgorithm
Client .down.> Policy
Client .down.> Context

hide empty fields
hide empty methods

@enduml


### Part 3: Optional Challenges

(These are not tested)

1. Create a new class `QuickSort` that implements `SortStrategy` and implement the Quick Sort algorithm.

2. Make the method `performSort([Date])` generic, so that other objects can also be sorted by the same method.
**Hint:** Have a look at Swift Generics and the interface `Comparable`.

3. Think about a useful decision in `Policy` when to use the new `QuickSort` algorithm.

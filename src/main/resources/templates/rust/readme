# Sorting with the Strategy Pattern

In this exercise, we want to implement sorting algorithms and choose them based on runtime specific variables.

### Part 1: Sorting

First, we need to implement two sorting algorithms, in this case `MergeSort` and `BubbleSort`.

**You have the following tasks:**

1. [task][Implement Bubble Sort](test_bubble_sort)
Implement the method `perform_sort(&mut [NaiveDate])` in the struct `BubbleSort`. Make sure to follow the Bubble Sort algorithm exactly.

2. [task][Implement Merge Sort](test_merge_sort)
Implement the method `perform_sort(&mut [NaiveDate])` in the struct `MergeSort`. Make sure to follow the Merge Sort algorithm exactly.

### Part 2: Strategy Pattern

We want the application to apply different algorithms for sorting a slice of `NaiveDate` objects.
Use the strategy pattern to select the right sorting algorithm at runtime.

**You have the following tasks:**

1. [task][SortStrategy Interface](test_sort_strategy_trait,test_sort_strategy_methods,test_sort_strategy_supertrait,test_merge_sort_struct,test_bubble_sort_struct)
Create a `SortStrategy` trait and adjust the sorting algorithms so that they implement this interface.
Also make sure to declare `std::any::Any` as a supertrait.

2. [task][Context Class](test_context_fields,test_context_methods)
Create and implement a `Context` struct following the below class diagram.
Also add a getter for `sort_algorithm` with the signature `sort_algorithm(&self) -> &dyn SortStrategy`.

3. [task][Context Policy](test_policy_fields,test_policy_methods)
Create and implement a `Policy` struct following the below class diagram with a simple configuration mechanism:

    1. [task][Select MergeSort](test_merge_sort_struct,test_use_merge_sort_for_big_list)
    Select `MergeSort` when the List has more than 10 dates.

    2. [task][Select BubbleSort](test_bubble_sort_struct,test_use_bubble_sort_for_small_list)
    Select `BubbleSort` when the List has less or equal 10 dates.

4. Complete the `main()` function which demonstrates switching between two strategies at runtime.

@startuml

class Policy {
  <color:testsColor(test_policy_methods)>+new(&RefCell<Context>)</color>
  <color:testsColor(test_policy_methods)>+configure(&[NaiveDate])</color>
}

class Context {
  <color:testsColor(test_context_methods)>+new()</color>
  <color:testsColor(test_context_methods)>+sort(&mut [NaiveDate])</color>
}

interface Any {
}

interface SortStrategy {
  <color:testsColor(test_sort_strategy_methods)>+perform_sort(&mut [NaiveDate])</color>
}

class BubbleSort {
  <color:testsColor(test_bubble_sort)>+perform_sort(&mut [NaiveDate])</color>
}

class MergeSort {
  <color:testsColor(test_merge_sort)>+perform_sort(&mut [NaiveDate])</color>
}

MergeSort -up-|> SortStrategy #testsColor(test_merge_sort_struct)
BubbleSort -up-|> SortStrategy #testsColor(test_bubble_sort_struct)
SortStrategy -up-|> Any #testsColor(test_sort_strategy_supertrait)
Policy -right-> Context #testsColor(test_policy_fields): context
Context -right-> SortStrategy #testsColor(test_context_fields): sort_algorithm

hide empty fields
hide empty methods

@enduml


### Part 3: Optional Challenges

(These are not tested)

1. Create a new struct `QuickSort` that implements `SortStrategy` and implement the Quick Sort algorithm.

2. Make the method `perform_sort(&mut [NaiveDate])` generic, so that other types can also be sorted by the same method.
**Hint:** Have a look at Rust Generics and the trait `Ord`.

3. Think about a useful decision in `Policy` when to use the new `QuickSort` algorithm.

meta {
  name: Load Test - Multiple Builds
  type: http
  seq: 9
}

post {
  url: {{baseUrl}}/api/v1/build
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "exerciseId": {{exerciseId}},
    "participationId": {{$randomInt}},
    "exerciseRepository": {
      "url": "https://github.com/load-test/repo-{{$randomInt}}.git",
      "commitHash": "{{$randomUUID}}"
    },
    "buildScript": "echo 'Load test build {{$randomInt}}'",
    "programmingLanguage": "JAVA"
  }
}

assert {
  res.status: in [200, 500]
  res.responseTime: lt 5000
}

tests {
  test("Service handles multiple requests", function() {
    const status = res.getStatus();
    expect(status).to.be.oneOf([200, 500]);
  });

  test("Response time is reasonable", function() {
    expect(res.getResponseTime()).to.be.below(5000);
  });

  test("Each request gets unique build ID", function() {
    if (res.getStatus() === 200) {
      const buildId = res.getBody().buildId;
      expect(buildId).to.be.a('string');
      expect(buildId).to.match(/^[0-9a-f-]{36}$/);
    }
  });

  test("Service remains stable under load", function() {
    // This test can be run multiple times in parallel
    // to simulate concurrent build requests
    expect(res.getStatus()).to.not.equal(503); // Service unavailable
  });
}

docs {
  # Load Test - Multiple Builds

  This test simulates multiple concurrent build requests to test the service's stability and performance.

  ## Load Test Features:
  - **Random Data**: Uses random participation IDs and repository URLs
  - **Unique Requests**: Each request has different data to avoid conflicts
  - **Performance Validation**: Checks response time and service stability
  - **Concurrency Ready**: Can be run in parallel for load testing

  ## Assertions:
  - Response status is either 200 (success) or 500 (Jenkins unavailable)
  - Response time is under 5 seconds
  - No 503 Service Unavailable errors
  - Each successful request gets a unique build ID

  ## Usage:
  Run this test multiple times concurrently to simulate high load:
  ```bash
  # Run 10 concurrent requests
  for i in {1..10}; do
    bruno run "Load Test - Multiple Builds" &
  done
  wait
  ```
}
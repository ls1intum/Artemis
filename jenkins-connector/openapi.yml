openapi: 3.0.3
info:
  title: Jenkins CI Connector API
  description: |
    Stateless microservice for Jenkins CI operations in the Artemis learning platform.
    
    This API provides a clean abstraction layer between Artemis core and Jenkins,
    handling all CI state management internally while exposing simple REST endpoints
    for build triggering and status monitoring.
  version: 1.0.0
  contact:
    name: Artemis Team
    url: https://github.com/ls1intum/Artemis
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8081
    description: Local development server
  - url: https://jenkins-connector.example.com
    description: Production server

paths:
  /api/builds/trigger:
    post:
      summary: Trigger a build
      description: |
        Triggers a build for a programming exercise participation.
        
        This is a stateless operation that will:
        - Create Jenkins projects/jobs if they don't exist
        - Configure repositories and permissions
        - Trigger the actual build
        - Return a UUID for tracking
      operationId: triggerBuild
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTriggerRequest'
            examples:
              java-exercise:
                summary: Java Maven Exercise
                value:
                  exerciseId: 1
                  participationId: 101
                  exerciseRepository:
                    url: "https://github.com/example/java-exercise.git"
                    commitHash: "abc123"
                    accessToken: "github_token_123"
                    branch: "main"
                  testRepository:
                    url: "https://github.com/example/java-tests.git"
                    commitHash: "def456"
                    accessToken: "github_token_123"
                    branch: "main"
                  buildScript: "pipeline { agent any; stages { stage('Test') { steps { sh 'mvn test' } } } }"
                  programmingLanguage: "java"
                  triggeredByPushTo: "ASSIGNMENT"
              python-exercise:
                summary: Python Exercise
                value:
                  exerciseId: 2
                  participationId: 201
                  exerciseRepository:
                    url: "https://github.com/example/python-exercise.git"
                    commitHash: "xyz789"
                    accessToken: "github_token_123"
                    branch: "main"
                  testRepository:
                    url: "https://github.com/example/python-tests.git"
                    commitHash: "uvw456"
                    accessToken: "github_token_123"
                    branch: "main"
                  buildScript: "pipeline { agent any; stages { stage('Test') { steps { sh 'python -m pytest' } } } }"
                  programmingLanguage: "python"
                  triggeredByPushTo: "TEST"
      responses:
        '200':
          description: Build triggered successfully
          content:
            application/json:
              schema:
                type: string
                format: uuid
                example: "550e8400-e29b-41d4-a716-446655440000"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/builds/status/{buildId}:
    get:
      summary: Get build status
      description: |
        Retrieves the current status of a build by its UUID.
        Status is fetched live from Jenkins.
      operationId: getBuildStatus
      parameters:
        - name: buildId
          in: path
          required: true
          description: Build UUID returned from trigger endpoint
          schema:
            type: string
            format: uuid
            example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Build status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildStatusResponse'
              examples:
                running:
                  summary: Running build
                  value:
                    buildId: "build-123"
                    status: "RUNNING"
                    startTime: "2024-01-15T10:30:00Z"
                    endTime: null
                    errorMessage: null
                success:
                  summary: Completed build
                  value:
                    buildId: "build-456"
                    status: "SUCCESS"
                    startTime: "2024-01-15T10:30:00Z"
                    endTime: "2024-01-15T10:32:30Z"
                    errorMessage: null
                failed:
                  summary: Failed build
                  value:
                    buildId: "build-789"
                    status: "FAILED"
                    startTime: "2024-01-15T10:30:00Z"
                    endTime: "2024-01-15T10:31:15Z"
                    errorMessage: "Compilation failed"
        '404':
          description: Build not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/builds/template/{language}:
    get:
      summary: Get build script template
      description: |
        Retrieves a default build script template for a programming language.
        This is optional functionality for cases where Artemis doesn't have templates.
      operationId: getBuildScriptTemplate
      parameters:
        - name: language
          in: path
          required: true
          description: Programming language identifier
          schema:
            type: string
            enum: [java, python, javascript, c, cpp, csharp, go, rust]
            example: "java"
        - name: exerciseType
          in: query
          required: false
          description: Type of exercise
          schema:
            type: string
            default: "basic"
            enum: [basic, advanced, blackbox]
      responses:
        '200':
          description: Template retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                example: |
                  pipeline {
                    agent any
                    stages {
                      stage('Test') {
                        steps {
                          sh 'mvn clean test'
                        }
                      }
                    }
                  }
        '404':
          description: Template not available for this language

  /api/health:
    get:
      summary: Health check
      description: |
        Returns the health status of the connector service and its dependencies.
        Includes connectivity to Jenkins and database.
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "UP"
                connector: "jenkins"
                version: "1.0.0"
                jenkins:
                  status: "UP"
                  url: "http://jenkins:8080"
                database:
                  status: "UP"
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  schemas:
    BuildTriggerRequest:
      type: object
      required:
        - exerciseId
        - participationId
        - exerciseRepository
        - buildScript
        - programmingLanguage
      properties:
        exerciseId:
          type: integer
          format: int64
          description: Artemis exercise ID
          example: 1
        participationId:
          type: integer
          format: int64
          description: Artemis participation ID
          example: 101
        exerciseRepository:
          $ref: '#/components/schemas/RepositoryInfo'
        testRepository:
          allOf:
            - $ref: '#/components/schemas/RepositoryInfo'
          nullable: true
        solutionRepository:
          allOf:
            - $ref: '#/components/schemas/RepositoryInfo'
          nullable: true
        auxiliaryRepositories:
          type: array
          items:
            $ref: '#/components/schemas/RepositoryInfo'
          description: Additional repositories for the exercise
        buildScript:
          type: string
          description: Complete Jenkins pipeline script
          example: "pipeline { agent any; stages { stage('Test') { steps { sh 'mvn test' } } } }"
        triggeredByPushTo:
          type: string
          nullable: true
          description: Type of repository that triggered the build
          enum: [ASSIGNMENT, TEST, SOLUTION]
        programmingLanguage:
          type: string
          description: Programming language of the exercise
          example: "java"
        additionalProperties:
          type: object
          additionalProperties:
            type: string
          description: Optional additional properties
          nullable: true

    RepositoryInfo:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          description: Git repository URL
          example: "https://github.com/example/repo.git"
        commitHash:
          type: string
          description: Specific commit hash to checkout
          nullable: true
          example: "abc123"
        cloneLocation:
          type: string
          description: Local path where repository should be cloned
          nullable: true
          example: "/workspace/repo"
        accessToken:
          type: string
          description: Authentication token for repository access
          nullable: true
          example: "github_token_123"
        branch:
          type: string
          description: Git branch to use
          nullable: true
          example: "main"

    BuildStatusResponse:
      type: object
      required:
        - buildId
        - status
      properties:
        buildId:
          type: string
          description: Jenkins build identifier
          example: "build-123"
        status:
          type: string
          enum: [QUEUED, RUNNING, SUCCESS, FAILED, CANCELLED, TIMEOUT]
          description: Current build status
          example: "RUNNING"
        startTime:
          type: string
          format: date-time
          description: Build start time
          nullable: true
          example: "2024-01-15T10:30:00Z"
        endTime:
          type: string
          format: date-time
          description: Build completion time
          nullable: true
          example: "2024-01-15T10:32:30Z"
        errorMessage:
          type: string
          description: Error message if build failed
          nullable: true
          example: "Compilation failed"

    HealthResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [UP, DOWN]
          description: Overall service health
        connector:
          type: string
          description: Connector type
          example: "jenkins"
        version:
          type: string
          description: Service version
          example: "1.0.0"
        jenkins:
          type: object
          properties:
            status:
              type: string
              enum: [UP, DOWN]
            url:
              type: string
              format: uri
        database:
          type: object
          properties:
            status:
              type: string
              enum: [UP, DOWN]

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
          example: "Bad Request"
        message:
          type: string
          description: Error description
          example: "Invalid repository URL"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"

tags:
  - name: builds
    description: Build operations
  - name: health
    description: Service health monitoring
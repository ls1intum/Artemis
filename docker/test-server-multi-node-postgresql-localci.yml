# ----------------------------------------------------------------------------------------------------------------------
# Setup for a multi-node test server with MySQL & LocalCI
# ----------------------------------------------------------------------------------------------------------------------
# It is designed to take in a lot of environment variables to take in all the configuration of the test server.
# ----------------------------------------------------------------------------------------------------------------------

services:
    artemis-app-node-1:
        &artemis-app-base
        container_name: artemis-app-node-1
        extends:
            file: ./artemis.yml
            service: artemis-app
        image: ghcr.io/ls1intum/artemis:${ARTEMIS_DOCKER_TAG:-latest}
        depends_on:
            &depends-on-base
            postgres:
                condition: service_healthy
            jhipster-registry:
                condition: service_healthy
            activemq-broker:
                condition: service_healthy
        pull_policy: always
        restart: always
        group_add:
            - ${DOCKER_GROUP_ID:-0}
        env_file:
            - ${ARTEMIS_ENV_FILE:-./artemis/config/prod-multinode.env}
            - ${ARTEMIS_NODE_1_ENV_FILE:-./artemis/config/node1.env}
            - ./artemis/config/postgres.env
        volumes:
            - ${ARTEMIS_VOLUME_MOUNT:-./.docker-data/artemis-data}:/opt/artemis/data
            - ${ARTEMIS_LEGAL_MOUNT:-./.docker-data/artemis-legal}:/opt/artemis/legal
            - ${ARTEMIS_DATA_EXPORT_MOUNT:-./.docker-data/artemis-data-exports}:/opt/artemis/data-exports
            - /var/run/docker.sock:/var/run/docker.sock

    artemis-app-node-2:
        <<: *artemis-app-base
        container_name: artemis-app-node-2
        depends_on:
          <<: *depends-on-base
          artemis-app-node-1:
              condition: service_healthy
        env_file:
            - ${ARTEMIS_ENV_FILE:-./artemis/config/prod-multinode.env}
            - ${ARTEMIS_NODE_2_ENV_FILE:-./artemis/config/node2.env}
            - ./artemis/config/postgres.env


    artemis-app-node-3:
        <<: *artemis-app-base
        container_name: artemis-app-node-3
        depends_on:
            <<: *depends-on-base
            artemis-app-node-1:
                condition: service_healthy
        env_file:
            - ${ARTEMIS_ENV_FILE:-./artemis/config/prod-multinode.env}
            - ${ARTEMIS_NODE_3_ENV_FILE:-./artemis/config/node3.env}
            - ./artemis/config/postgres.env

    jhipster-registry:
        extends:
            file: ./broker-registry.yml
            service: jhipster-registry
        networks:
            - artemis

    activemq-broker:
        extends:
            file: ./broker-registry.yml
            service: activemq-broker
        networks:
            - artemis

    postgres:
      extends:
        file: ./postgres.yml
        service: postgres
      restart: always
      env_file:
        - ${DATABASE_ENV_FILE:-./postgres/default.env}
      volumes:
        - ${DATABASE_VOLUME_MOUNT:-./.docker-data/artemis-postgres-data}:/var/lib/postgresql/data


    nginx:
        extends:
            file: ./nginx.yml
            service: nginx
        depends_on:
            artemis-app-node-1:
                condition: service_started
            artemis-app-node-2:
                condition: service_started
            artemis-app-node-3:
                condition: service_started
        restart: always
        volumes:
            - ./nginx/artemis-upstream-multi-node.conf:/etc/nginx/includes/artemis-upstream.conf:ro
            - ./nginx/artemis-ssh-upstream-multi-node.conf:/etc/nginx/includes/artemis-ssh-upstream.conf:ro
            - type: bind
              source: ${NGINX_PROXY_SSL_CERTIFICATE_PATH:-../src/test/playwright/certs/artemis-nginx+4.pem}
              target: "/certs/fullchain.pem"
            - type: bind
              source: ${NGINX_PROXY_SSL_CERTIFICATE_KEY_PATH:-../src/test/playwright/certs/artemis-nginx+4-key.pem}
              target: "/certs/priv_key.pem"

networks:
    artemis:
        driver: "bridge"
        name: artemis

name: Run Test
description: 'Runs the server tests'

inputs:
    database:
        type: choice
        description: 'The database to use'
        required: true
        default: 'H2'
        options:
            - 'H2'
            - 'PostgreSQL'
            - 'MySQL'

runs:
    using: composite
    steps:
        -   uses: actions/checkout@v3
        -   name: Setup Java
            uses: actions/setup-java@v3
            with:
                distribution: 'temurin'
                java-version: '${{ env.java }}'
                cache: 'gradle'
        -   name: Java Tests
            id: tests
            run: set -o pipefail && SPRING_PROFILES_INCLUDE=${{ inputs.database }} ./gradlew --console=plain test jacocoTestReport -x webapp jacocoTestCoverageVerification | tee tests.log
        -   name: Print failed tests
            if: failure()
            run: cat tests.log | grep "Test >.* FAILED" || [[ $? == 1 ]]
        -   name: Count failed tests
            id: failedTestCounter
            if: failure()
            run: echo "FAILED_TESTS_COUNT=$(cat tests.log | grep "Test >.* FAILED" | wc -l)" >> $GITHUB_OUTPUT
        -   name: Report action failure
            if: failure()
            uses: Sibz/github-status-action@v1
            with:
                authToken: ${{secrets.GITHUB_TOKEN}}
                context: 'Test Run - '${{ inputs.database }}
                description: '${{ steps.failedTestCounter.outputs.FAILED_TESTS_COUNT }} failed test(s) ❌'
                state: 'failure'
                sha: ${{github.event.pull_request.head.sha || github.sha}}
        -   name: Report action success
            if: success()
            uses: Sibz/github-status-action@v1
            with:
                authToken: ${{secrets.GITHUB_TOKEN}}
                context: 'Test Run - '${{ inputs.database }}
                description: 'Test succeeded ✅'
                state: 'success'
                sha: ${{github.event.pull_request.head.sha || github.sha}}
        -   name: Test Report
            uses: dorny/test-reporter@v1
            if: success() || failure()
            with:
                name: ${{ inputs.database }} Tests
                path: build/test-results/test/*.xml
                reporter: java-junit
        -   name: Number of Server Starts
            if: success() || failure()
            run: bash supporting_scripts/extract_number_of_server_starts.sh

name: Build

on:
  pull_request:
    paths-ignore:
    - 'README.md'
    - 'CODE_OF_CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'SECURITY.md'
    - 'docs/**'
    - '.github/**'
    - '!.github/workflows/build.yml'
  push:
    branches:
    - develop
    - main
    - release/*
    tags: '[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
    - 'README.md'
    - 'CODE_OF_CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'SECURITY.md'
    - 'docs/**'
    - '.github/**'
    - '!.github/workflows/build.yml'
  release:
    types:
    - created

# Keep in sync with codeql-analysis.yml and test.yml
env:
  CI: true
  node: 18
  java: 17
  RAW_URL: https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}

jobs:

  build:
    name: Build .war artifact
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '${{ env.node }}'
        cache: 'npm'
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '${{ env.java }}'
        cache: 'gradle'
    - name: Production Build
      run: ./gradlew -Pprod -Pwar clean bootWar
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Artemis.war
        path: build/libs/Artemis-*.war
    - name: Upload Release Artifact
      if: github.event_name == 'release' && github.event.action == 'created'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build/libs/Artemis-${{ github.event.release.tag_name }}.war
        asset_name: Artemis.war
        asset_content_type: application/x-webarchive

  docker:
    name: Build and Push Docker Image
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'ls1intum/Artemis' }}
    runs-on: ubuntu-latest
    steps:
    - name: Compute Tag
      uses: actions/github-script@v6
      id: compute-tag
      with:
        result-encoding: string
        script: |
          if (context.eventName === "pull_request") {
            return "pr-" + context.issue.number;
          }
          if (context.eventName === "release") {
            return "latest";
          }
          if (context.eventName === "push") {
            if (context.ref.startsWith("refs/tags/")) {
              return context.ref.slice(10);
            }
            if (context.ref === "refs/heads/develop") {
              return "develop";
            }
          }
          return "FALSE";
    - name: Git Checkout for PRs
      if: ${{ github.event_name == 'pull_request' }}
      # Checkout pull request HEAD commit instead of merge commit
      # this is done to include the correct branch and git information inside the build
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Git Checkout for push actions
      if: ${{ github.event_name == 'push' }}
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}
    - name: Git Checkout for push actions
      if: ${{ github.event_name == 'release' }}
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    # Build and Push to GitHub Container Registry
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      if: ${{ steps.compute-tag.outputs.result != 'FALSE' }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and Push to GitHub Container Registry
      uses: docker/build-push-action@v4
      if: ${{ steps.compute-tag.outputs.result != 'FALSE' }}
      with:
        # TODO: maybe even add arm/v7 for older DevBoards and arm64 for Mac M1 and new DevBoards
        # TODO: add arm64 support by first building the .war file in a amd64 step then creating the runtime env
        platforms: amd64
        file: ./docker/artemis/Dockerfile
        context: .
        tags: ghcr.io/ls1intum/artemis:${{ steps.compute-tag.outputs.result }}
        push: true

    # TODO: Push to Docker Hub (develop + tag)

    # TODO: Push to Chair Harbour (??)

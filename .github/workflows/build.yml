name: Build
# The name of this workflow (Build) should be in sync with the test-e2e.yml workflow's workflow_run listener.

permissions:
  contents: read
  packages: write  # Required for downloading from and pushing to GitHub Packages

on:
  pull_request:
    paths-ignore:
    - 'README.md'
    - 'CODE_OF_CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'SECURITY.md'
    - 'docs/**'
    - '.github/**'
    - '!.github/workflows/build.yml'
    - '!.github/workflows/test-e2e.yml'
    - '.husky/**'
    - 'docker/**'
    - '!docker/*'
    - 'docker/README.md'
    - '!docker/artemis/Dockerfile'
    - 'rules/**'
    - 'supporting_scripts/**'
    - '.coderabbit.yaml'
    - '.editorconfig'
    - '.gitattributes'
    - '.lintstagedrc.js'
    - '.prettierignore'
    - '.prettierrc'
    - '.whitesource'
    - 'artemis-server-cli'
    - 'CITATION.cff'
    - 'jest.config.js'
    - 'linting.sh'
    - 'proxy.conf.mjs'
    - 'read.ms'
    - 'result.md'
    - 'src/test/javascript/spec/stub.js'

  push:
    branches:
    - develop
    - main
    - release/*
    tags: '[0-9]+.[0-9]+.[0-9]+'
  release:
    types:
    - created


# Concurrency control for GitHub Actions workflow
# Ensures efficient use of CI resources by canceling redundant runs where needed.
#
# - Pull requests: Cancel previous runs for the same PR to avoid redundant builds.
#   Example: PR #42 → "build-pr-42"
#
# - Pushes (branches & tags): Each branch or tag runs independently. If a run is in progress for the same branch or tag, it is canceled.
#   Example: Push to "develop" → "build-refs/heads/develop"
#   Example: Push to "release/1.2.3" → "build-refs/heads/release/1.2.3"
#   Example: Tag "v1.2.3" → "build-refs/tags/v1.2.3"
#
# - Releases: Each release runs independently.
#   Example: Release for "v1.2.3" → "build-release-v1.2.3"
#
# - Default fallback: Ensures the workflow always has a concurrency group.
#   Example: Unexpected event type → "build-default"
concurrency:
  group: |
    ${{
      github.event_name == 'pull_request' && format('build-pr-{0}', github.event.pull_request.number) ||
      github.event_name == 'push' && format('build-{0}', github.ref) ||
      github.event_name == 'release' && format('build-release-{0}', github.event.release.tag_name) ||
      'build-default'
    }}
  cancel-in-progress: true


# Keep this filename in sync with the filename environment variable (PR_AUTO_BUILD_FILE_NAME) in the testserver-deployment.yml workflow
# and with the build_workflow_name environment variable in the staging-deployment.yml workflow


# Keep in sync with codeql-analysis.yml and test.yml and analysis-of-endpoint-connections.yml
env:
  CI: true
  node: 22
  java: 21

jobs:

  build:
    name: Build .war artifact
    runs-on: ubuntu-latest
    env:
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.node }}'
          cache: 'npm'
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '${{ env.java }}'
          cache: 'gradle'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Production Build
        run: ./gradlew -Pprod -Pwar clean bootWar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Artemis.war
          path: build/libs/Artemis-*.war
      - name: Upload Release Artifact
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/libs/Artemis-${{ github.event.release.tag_name }}.war
          asset_name: Artemis.war
          asset_content_type: application/x-webarchive

  docker-build:
    name: Build Docker Image for ls1intum/artemis
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'ls1intum/Artemis' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner || 'ubuntu-latest' }}
    steps:
      # Git Checkout
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
  
      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: "network=default"
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["https://docker-mirror.ase.in.tum.de:8765"]

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/ls1intum/artemis

      - name: Build and push Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/artemis/Dockerfile
          tags: ghcr.io/ls1intum/artemis
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GITHUB_ACTOR=${{ github.actor }}
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          network: default
          outputs: type=image,"name=ghcr.io/ls1intum/artemis",push-by-digest=true,name-canonical=true,push=true

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          image="ls1intum/artemis"
          echo "IMAGE_NAME=${image//\//-}" >> $GITHUB_ENV

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"          
  
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.IMAGE_NAME }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  docker-merge:
    runs-on: ubuntu-latest
    outputs: 
      image_tag: ${{ steps.output-image-tag.outputs.image_tag }}
    needs:
      - docker-build
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'ls1intum/Artemis' }}
    steps:
      - name: Prepare
        run: |
          image="ls1intum/artemis"
          echo "IMAGE_NAME=${image//\//-}" >> $GITHUB_ENV

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ env.IMAGE_NAME }}-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Process tags input to support both simple tags and advanced configuration
      - name: Prepare tag configuration
        id: tag_config
        run: |
          # Use TAGS_CONFIG environment variable to store tags configuration
          echo "TAGS_CONFIG<<EOF" >> $GITHUB_ENV
          
          # Default tagging configuration
          echo "type=raw,value=latest,enable={{is_default_branch}}" >> $GITHUB_ENV
          echo "type=ref,event=branch" >> $GITHUB_ENV
          echo "type=ref,event=pr" >> $GITHUB_ENV
          echo "type=ref,event=tag" >> $GITHUB_ENV
          
          echo "EOF" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/ls1intum/artemis
          tags: |
            ${{ env.TAGS_CONFIG }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/ls1intum/artemis@sha256:%s ' *)          

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/ls1intum/artemis:${{ steps.meta.outputs.version }}
          
      - id: output-image-tag
        run: |
          echo "image_tag=${{ steps.meta.outputs.version }}" >> "$GITHUB_OUTPUT"

  # Save Docker image tag as an artifact
  save-docker-tag:
    name: Save Docker Image Tag
    needs: docker-merge
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'ls1intum/Artemis' }}
    runs-on: ubuntu-latest
    steps:
      - name: Save Docker Tag to File
        run: |
          echo "${{ needs.docker-merge.outputs.image_tag }}" > docker-tag.txt
          echo "Using Docker tag: ${{ needs.docker-merge.outputs.image_tag }}"

      - name: Upload Docker Tag as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-tag
          path: docker-tag.txt

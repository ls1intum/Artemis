name: Append Feature Proposal to Issue Description

on:
  issues:
    types: [assigned, unassigned]

jobs:
  manage-feature-proposal:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Append Feature Proposal Template to Issue Description
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issueNumber = context.payload.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber,
            });
            
            // Check if the issue has a 'bug' label
            const hasBugLabel = issue.data.labels.some(label => label.name === 'bug');
            if (hasBugLabel) {
              console.log("Issue is labeled as 'bug'. Skipping...");
              return; // Exit the script if 'bug' label is found
            }
            
            const featureProposalMarker = '<!-- Feature Proposal Marker -->';
            if (!issue.data.body.includes(featureProposalMarker)) {
              const templateContent = await github.rest.repos.getContent({
                owner,
                repo,
                path: '.github/ISSUE_TEMPLATE/feature-proposal--developer-.md'
              });
              let templateText = Buffer.from(templateContent.data.content, 'base64').toString();

              // Add separator line and remove metadata section
              templateText = '---\n' + templateText.split('---').slice(2).join('---').trim();

              const updatedBody = issue.data.body + "\n" + templateText;
              
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issueNumber,
                body: updatedBody,
              });
            }

      - name: Update or Post instructions comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issueNumber = context.payload.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber,
            });
            
            // Check if the issue has a 'bug' label
            const hasBugLabel = issue.data.labels.some(label => label.name === 'bug');
            if (hasBugLabel) {
              console.log("Issue is labeled as 'bug'. Skipping...");
              return; // Exit the script if 'bug' label is found
            }
            
            const assignees = issue.data.assignees.map(assignee => '@' + assignee.login).join(', ');
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: issueNumber,
            });
            const instructionCommentMarker = '<!-- Instruction Comment Marker -->';
            let instructionCommentId = null;
            
            for (const comment of comments.data) {
              if (comment.body.includes(instructionCommentMarker)) {
                instructionCommentId = comment.id;
                break;
              }
            }
            
            const commentBody = `Hello ${assignees},\n\nThank you for taking on this issue.\n\nTo ensure the Feature Proposal is accurately filled out, we kindly ask you to follow the structure provided.\n\n**For detailed instructions and best practices**, please refer to our **[Development Process Guidelines](https://docs.artemis.cit.tum.de/dev/development-process.html)**.\n\n${instructionCommentMarker}`;

            if (instructionCommentId) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: instructionCommentId,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body: commentBody,
              });
            }

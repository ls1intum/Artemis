---
name: Deploy Artemis with Ansible
on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch to deploy'
        required: true
      commit_sha:
        description: 'Commit SHA to deploy'
        required: true
      environment_name:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - artemis-staging-localci.artemis.cit.tum.de
          - staging1.artemis.cit.tum.de
          - artemis.tum.de
      triggered_by:
        description: "Username that triggered deployment (not required, shown if triggered via GitHub UI, logged if triggered via GitHub app)"
        required: false
        type: string

concurrency: ${{ github.event.inputs.environment_name }}

env:
  build_workflow_name: build.yml

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      build_workflow_run_id: ${{ steps.set_build_workflow_id.outputs.workflow_id }}
    steps:
      - name: Print inputs
        run: |
          echo "Branch: ${{ github.event.inputs.branch_name }}"
          echo "Commit SHA: ${{ github.event.inputs.commit_sha }}"
          echo "Environment: ${{ github.event.inputs.environment_name }}"
          echo "Triggered by: ${{ github.event.inputs.triggered_by }}"

      - name: Fetch workflow runs by branch and commit
        id: get_workflow_run
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/workflows/${{ env.build_workflow_name }}/runs?branch=${{ github.event.inputs.branch_name }}&head_sha=${{ github.event.inputs.commit_sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract workflow ID
        id: set_build_workflow_id
        run: |
          WORKFLOW_DATA='${{ steps.get_workflow_run.outputs.data }}'

          WORKFLOW_ID=$(echo "$WORKFLOW_DATA" | jq -r '
            .workflow_runs[0].id // empty
          ')

          if [ -z "$WORKFLOW_ID" ]; then
            echo "::error::No build found for commit ${{ github.event.inputs.commit_sha }} on branch ${{ github.event.inputs.branch_name }}"
            exit 1
          fi

          echo "Found build workflow ID: $WORKFLOW_ID for commit ${{ github.event.inputs.commit_sha }} on branch ${{ github.event.inputs.branch_name }}"
          echo "workflow_id=$WORKFLOW_ID" >> $GITHUB_OUTPUT

      - name: Check for war artifact
        id: verify_artifact
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/runs/${{ steps.set_build_workflow_id.outputs.workflow_id }}/artifacts?name=Artemis.war
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifact exists
        id: check_result
        run: |
          TOTAL_COUNT=$(echo '${{ steps.verify_artifact.outputs.data }}' | jq -r '.total_count')

          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "Found Artemis.war artifact in build for commit ${{ github.event.inputs.commit_sha }}"
          else
            echo "::error::No Artemis.war artifact found in build for commit ${{ github.event.inputs.commit_sha }}!"
            exit 1
          fi

  deploy:
    needs: check-build-status
    runs-on: [self-hosted, deploy-artemis]
    environment:
      name: ${{ github.event.inputs.environment_name }}
      url: ${{ vars.DEPLOYMENT_URL }}
    env:
      DEPLOYMENT_HOSTS_PRIMARY: ${{ vars.DEPLOYMENT_HOSTS_PRIMARY }}
      DEPLOYMENT_HOSTS_SECONDARY: ${{ vars.DEPLOYMENT_HOSTS_SECONDARY }}
      DEPLOYMENT_USER: ${{ vars.DEPLOYMENT_USER }}
      DEPLOYMENT_FOLDER: ${{ vars.DEPLOYMENT_FOLDER }}
      HEALTH_CHECK_URL: "${{ vars.DEPLOYMENT_URL }}/management/health"
      WORKFLOW_RUN_ID: ${{ needs.check-build-status.outputs.build_workflow_run_id }}

    steps:
      - name: Setup SSH and Known Hosts
        env:
          DEPLOYMENT_SSH_KEY: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          DEPLOYMENT_HOST_PUBLIC_KEYS: ${{ vars.DEPLOYMENT_HOST_PUBLIC_KEYS }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write private key
          echo "$DEPLOYMENT_SSH_KEY" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Write known hosts
          echo "$DEPLOYMENT_HOST_PUBLIC_KEYS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Checkout Artemis-Ansible repository
        uses: actions/checkout@v4
        with:
          repository: 'ls1intum/artemis-ansible'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Artemis-Ansible dependencies
        run: |
          pip3 install -r requirements.txt
          ansible-galaxy collection install -r requirements.yml --force
          ansible-galaxy install -r requirements.yml --force
          ansible-galaxy install -r ~/.ansible/collections/ansible_collections/ls1intum/artemis/requirements.yml

      - name: Set Vault token
        run: |
          echo "${{ secrets.VAULT_TOKEN }}" > ~/.vault-token
          export VAULT_TOKEN=$(cat ~/.vault-token)

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Artemis.war
          path: /tmp/artifact
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ env.WORKFLOW_RUN_ID  }}

      - name: Deploy Artemis
        run: |
          WAR_FILE=$(ls -1 /tmp/artifact/*.war | head -n 1)

          ansible-playbook ${{ vars.ANSIBLE_PLAYBOOK_PATH }} -e artemis_version="$WAR_FILE" -e ansible_user="${{ vars.DEPLOYMENT_USER }}"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f ~/.vault-token
          unset VAULT_TOKEN
          rm -rf /tmp/artifact/*

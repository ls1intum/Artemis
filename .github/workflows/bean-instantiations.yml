name: Check Bean Instantiations on Startup and with deferred eager Initialization

on:
  push:
    branches: [ develop ]
    paths:
      - src/main/java/**
  pull_request:
    paths:
      -  src/main/java/**

jobs:
  bean-instantiation-check:
    runs-on: ubuntu-latest

    env:
      MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH: 9
      MAX_DEFERRED_CHAIN_LENGTH: 10
      MIN_INSTANTIATED_BEANS: 20
      MAX_INSTANTIATED_BEANS: 92
      MIN_DEFERRED_CHAIN_LENGTH: 1

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Validate threshold consistency between BeanInstantiationTracer and GitHub Action
        run: |
          echo "Validating that thresholds in BeanInstantiationTracer match GitHub Action values..."

          echo "GitHub Action thresholds:"
          echo "  MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH = $MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH"
          echo "  MAX_DEFERRED_CHAIN_LENGTH = $MAX_DEFERRED_CHAIN_LENGTH"
          echo "  MIN_INSTANTIATED_BEANS = $MIN_INSTANTIATED_BEANS"
          echo "  MAX_INSTANTIATED_BEANS = $MAX_INSTANTIATED_BEANS"
          echo "  MIN_DEFERRED_CHAIN_LENGTH = $MIN_DEFERRED_CHAIN_LENGTH"

          JAVA_FILE="src/main/java/de/tum/cit/aet/artemis/core/config/BeanInstantiationTracer.java"

          if [ ! -f "$JAVA_FILE" ]; then
            echo "‚ùå BeanInstantiationTracer.java not found at expected location: $JAVA_FILE"
            echo "Searching for the file..."
            find . -name "BeanInstantiationTracer.java" -type f || echo "File not found anywhere"
            exit 1
          fi
          EXTRACT_NUMBER_REGEX='.*=\s*([0-9]+).*'
          JAVA_MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH=$(grep -E "STARTUP_MAX_DEPENDENCY_CHAIN_THRESHOLD\s*=" "$JAVA_FILE" | sed -E "s/$EXTRACT_NUMBER_REGEX/\1/" | head -1)
          JAVA_MAX_DEFERRED_CHAIN_LENGTH=$(grep -E "DEFERRED_INIT_MAX_DEPENDENCY_CHAIN_THRESHOLD\s*=" "$JAVA_FILE" | sed -E "s/$EXTRACT_NUMBER_REGEX/\1/" | head -1)

          echo "Extracted thresholds from Java file:"
          echo "STARTUP_MAX_DEPENDENCY_CHAIN_THRESHOLD = $JAVA_MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH"
          echo "DEFERRED_INIT_MAX_DEPENDENCY_CHAIN_THRESHOLD = $JAVA_MAX_DEFERRED_CHAIN_LENGTH"

          if [ -z "$JAVA_MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH" ] || [ -z "$JAVA_MAX_DEFERRED_CHAIN_LENGTH" ]; then
            echo "‚ùå Failed to extract threshold values from Java file"
            echo "Java file contents around threshold definitions:"
            grep -A2 -B2 -E "(STARTUP_MAX_DEPENDENCY_CHAIN_THRESHOLD|DEFERRED_INIT_MAX_DEPENDENCY_CHAIN_THRESHOLD)" "$JAVA_FILE" || echo "Threshold constants not found"
            exit 1
          fi

          THRESHOLD_MISMATCH=false

          if [ "$JAVA_MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH" != "$MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH" ]; then
            echo "‚ùå STARTUP_MAX_DEPENDENCY_CHAIN_THRESHOLD mismatch:"
            echo "   Java: $JAVA_MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH"
            echo "   GitHub Action: $MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH"
            THRESHOLD_MISMATCH=true
          fi

          if [ "$JAVA_MAX_DEFERRED_CHAIN_LENGTH" != "$MAX_DEFERRED_CHAIN_LENGTH" ]; then
            echo "‚ùå DEFERRED_INIT_MAX_DEPENDENCY_CHAIN_THRESHOLD mismatch:"
            echo "   Java: $JAVA_MAX_DEFERRED_CHAIN_LENGTH"
            echo "   GitHub Action: $MAX_DEFERRED_CHAIN_LENGTH"
            THRESHOLD_MISMATCH=true
          fi

          if [ "$THRESHOLD_MISMATCH" = true ]; then
            echo ""
            echo "üîß Please update either the Java constants or GitHub Action variables to match:"
            echo "   - Java file: $JAVA_FILE"
            echo "   - GitHub Action env variables at the job level"
            exit 1
          fi

          echo "‚úÖ All thresholds match between Java file and GitHub Action"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build application
        run: ./gradlew clean bootJar -x test -x webapp

      - name: Start Spring Boot app
        run: |
          PROFILES=dev,localci,lti,aeolus,theia,iris,localvc,artemis,scheduling,buildagent,core,ldap
          JAR=$(ls build/libs/Artemis*.jar | head -n1)
          nohup java -jar $JAR \
            --spring.profiles.active=$PROFILES \
            --artemis.user-management.passkey.enabled=true \
            --artemis.user-management.use-external=false \
            --artemis.iris.url=http://iris.fake \
            --artemis.iris.secret-token=token \
            --spring.datasource.url="jdbc:h2:mem:mydb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE" \
            --spring.datasource.username=sa \
            --spring.datasource.password= \
            --eureka.client.enabled=false \
            --aeolus.url=http://aeolus.fake \
            > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for the application to start
        run: |
          RUNNING_MESSAGE="'Artemis' is running!"
          STARTUP_TIMEOUT_ATTEMPTS=30
          STARTUP_RETRY_INTERVAL=2
          STARTUP_TOTAL_TIMEOUT=$((STARTUP_TIMEOUT_ATTEMPTS * STARTUP_RETRY_INTERVAL))
          LOG_FILE="app.log"

          echo "Waiting up to ${STARTUP_TOTAL_TIMEOUT}s for $RUNNING_MESSAGE to appear in $LOG_FILE..."

          isAppRunning=false
          for i in $(seq 1 $STARTUP_TIMEOUT_ATTEMPTS); do
            if grep -q "$RUNNING_MESSAGE" "$LOG_FILE"; then
              isAppRunning=true
              echo "‚úÖ Found $RUNNING_MESSAGE in $LOG_FILE after $i attempts"
              break
            fi
            echo "  attempt $i/$STARTUP_TIMEOUT_ATTEMPTS: not found yet"
            sleep $STARTUP_RETRY_INTERVAL
          done

          if [ "$isAppRunning" = false ]; then
            echo "‚ùå Timeout: $RUNNING_MESSAGE not found in $LOG_FILE"
            cat $LOG_FILE
            exit 1
          fi

      - name: Extract and validate startup bean instantiation metrics
        run: |
          STARTUP_LOG_PATTERN="Bean instantiation graph exported to startupBeans\.dot \(([0-9]+) edges, longest dependency chain length: ([0-9]+)\)"
          LOG_FILE="app.log"

          # Extract search text from pattern (everything before opening parenthesis)
          STARTUP_SEARCH=$(echo "$STARTUP_LOG_PATTERN" | sed 's/ \\(.*$//')

          LINE=$(grep -E "$STARTUP_SEARCH" $LOG_FILE) \
            || { echo "‚ùå No startup metrics line found"; cat $LOG_FILE; exit 1; }

          if [[ "$LINE" =~ $STARTUP_LOG_PATTERN ]]; then
            INSTANTIATED_BEANS=${BASH_REMATCH[1]}
            LONGEST_CHAIN_LENGTH=${BASH_REMATCH[2]}
          else
            echo "‚ùå Failed to parse startup metrics from: $LINE"
            exit 1
          fi

          echo "‚Ä¢ Number of instantiated beans = $INSTANTIATED_BEANS"
          echo "‚Ä¢ Longest dependency chain length = $LONGEST_CHAIN_LENGTH"

          echo "Validating against thresholds: MIN_INSTANTIATED_BEANS=$MIN_INSTANTIATED_BEANS (expected ‚â• $MIN_INSTANTIATED_BEANS), MAX_INSTANTIATED_BEANS=$MAX_INSTANTIATED_BEANS (expected ‚â§ $MAX_INSTANTIATED_BEANS), MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH=$MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH (expected ‚â§ $MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH)"

          STARTUP_VALIDATION_FAILED=false

          if (( INSTANTIATED_BEANS < MIN_INSTANTIATED_BEANS )); then
            echo "‚ùå $INSTANTIATED_BEANS < $MIN_INSTANTIATED_BEANS beans. Something seems to be wrong, as usually more beans are instantiated."
            STARTUP_VALIDATION_FAILED=true
          fi

          if (( INSTANTIATED_BEANS > MAX_INSTANTIATED_BEANS )); then
            echo "‚ùå $INSTANTIATED_BEANS > $MAX_INSTANTIATED_BEANS threshold"
            STARTUP_VALIDATION_FAILED=true
          fi

          if (( LONGEST_CHAIN_LENGTH > MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH )); then
            echo "‚ùå Longest dependency chain length $LONGEST_CHAIN_LENGTH > $MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH threshold"
            STARTUP_VALIDATION_FAILED=true
          fi

          if [ "$STARTUP_VALIDATION_FAILED" = false ]; then
            echo "‚úÖ Final values ‚Üí Beans: $INSTANTIATED_BEANS; Longest dependency chain length: $LONGEST_CHAIN_LENGTH"
            echo "‚úÖ Startup bean instantiation metrics within expected ranges"
          fi

          # Export variables for next step
          echo "LONGEST_CHAIN_LENGTH=$LONGEST_CHAIN_LENGTH" >> $GITHUB_ENV
          echo "STARTUP_VALIDATION_FAILED=$STARTUP_VALIDATION_FAILED" >> $GITHUB_ENV

      - name: Check for startup dependency chains exceeding threshold
        run: |
          STARTUP_DEEP_CHAIN_PATTERN="Startup long bean instantiation chain"
          LOG_FILE="app.log"

          if (( LONGEST_CHAIN_LENGTH > MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH )); then
            echo "‚ùå Startup dependency chain length $LONGEST_CHAIN_LENGTH > $MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH threshold"
            echo "Chains exceeding threshold:"
            grep -E "$STARTUP_DEEP_CHAIN_PATTERN" $LOG_FILE || echo "  (No detailed chains found in log)"
            echo "üîß These chains violate the threshold MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH. Please refactor them to break these chains.
            echo "You can find a visualization of the bean instantiation graph in startupBeans.dot when starting the application locally."
            echo "You can visualize the file on http://webgraphviz.com/"
          else
            echo "‚úÖ No startup dependency chains exceed the threshold of $MAX_STARTUP_DEPENDENCY_CHAIN_LENGTH"
          fi

          if [ "$STARTUP_VALIDATION_FAILED" = "true" ]; then
            exit 1
          fi

      - name: Extract and validate deferred eager bean chain length
        run: |
          DEFERRED_BEAN_PATTERN="Maximum dependency chain length during deferred eager init: ([0-9]+)"
          DEFERRED_TIMEOUT_ATTEMPTS=10
          DEFERRED_RETRY_INTERVAL=12
          DEFERRED_TOTAL_TIMEOUT=$((DEFERRED_TIMEOUT_ATTEMPTS * DEFERRED_RETRY_INTERVAL))
          LOG_FILE="app.log"

          # Extract search text from pattern (everything before :)
          DEFERRED_BEAN_SEARCH=$(echo "$DEFERRED_BEAN_PATTERN" | sed 's/:.*$//')

          echo "Waiting for deferred eager bean initialization to complete..."

          DEFERRED_LINE=""
          for i in $(seq 1 $DEFERRED_TIMEOUT_ATTEMPTS); do
            DEFERRED_LINE=$(grep -E "$DEFERRED_BEAN_SEARCH" $LOG_FILE 2>/dev/null || true)
            if [ -n "$DEFERRED_LINE" ]; then
              echo "‚úÖ Found deferred eager bean initialization log after $i attempts"
              break
            fi
            echo "  attempt $i/$DEFERRED_TIMEOUT_ATTEMPTS: deferred eager bean initialization not completed yet"
            sleep $DEFERRED_RETRY_INTERVAL
          done

          if [ -z "$DEFERRED_LINE" ]; then
            echo "‚ùå No deferred eager bean chain length line found after ${DEFERRED_TOTAL_TIMEOUT}s"
            cat $LOG_FILE
            exit 1
          fi

          if [[ "$DEFERRED_LINE" =~ $DEFERRED_BEAN_PATTERN ]]; then
            DEFERRED_CHAIN_LENGTH=${BASH_REMATCH[1]}
          else
            echo "‚ùå Failed to parse deferred eager bean chain length from: $DEFERRED_LINE"
            exit 1
          fi

          echo "‚Ä¢ Maximum dependency chain length during deferred eager bean initialization = $DEFERRED_CHAIN_LENGTH"
          echo "Validating against thresholds: MIN_DEFERRED_CHAIN_LENGTH=$MIN_DEFERRED_CHAIN_LENGTH (expected ‚â• $MIN_DEFERRED_CHAIN_LENGTH), MAX_DEFERRED_CHAIN_LENGTH=$MAX_DEFERRED_CHAIN_LENGTH (expected ‚â§ $MAX_DEFERRED_CHAIN_LENGTH)"

          # Set validation flags instead of exiting immediately
          DEFERRED_VALIDATION_FAILED=false

          if (( DEFERRED_CHAIN_LENGTH < MIN_DEFERRED_CHAIN_LENGTH )); then
            echo "‚ùå Deferred chain length $DEFERRED_CHAIN_LENGTH < $MIN_DEFERRED_CHAIN_LENGTH. Something seems to be wrong, as usually some deferred beans are instantiated."
            echo "Was the deferred eager bean initialization removed? If so, you have to adapt this Github Action."
            DEFERRED_VALIDATION_FAILED=true
          fi

          if (( DEFERRED_CHAIN_LENGTH > MAX_DEFERRED_CHAIN_LENGTH )); then
            echo "‚ùå Deferred chain length $DEFERRED_CHAIN_LENGTH > $MAX_DEFERRED_CHAIN_LENGTH threshold"
            DEFERRED_VALIDATION_FAILED=true
          fi

          if [ "$DEFERRED_VALIDATION_FAILED" = false ]; then
            echo "‚úÖ Deferred eager bean chain length: $DEFERRED_CHAIN_LENGTH"
            echo "‚úÖ Deferred eager bean dependency chain length within expected ranges"
          fi

          # Export variables for next step
          echo "DEFERRED_CHAIN_LENGTH=$DEFERRED_CHAIN_LENGTH" >> $GITHUB_ENV
          echo "DEFERRED_VALIDATION_FAILED=$DEFERRED_VALIDATION_FAILED" >> $GITHUB_ENV

      - name: Check for deferred dependency chains exceeding threshold
        run: |
          DEFERRED_LONG_CHAIN_PATTERN="Deferred long bean instantiation chain"
          LOG_FILE="app.log"

          echo "Checking for deferred dependency chains exceeding threshold..."

          if (( DEFERRED_CHAIN_LENGTH > MAX_DEFERRED_CHAIN_LENGTH )); then
            echo "‚ùå Deferred dependency chain length $DEFERRED_CHAIN_LENGTH > $MAX_DEFERRED_CHAIN_LENGTH threshold"
            echo "Chains exceeding threshold:"
            grep -E "$DEFERRED_LONG_CHAIN_PATTERN" $LOG_FILE || echo "  (No detailed chains found in log)"
            echo "üîß These chains violate the threshold MAX_DEFERRED_CHAIN_LENGTH. Please refactor them to break these chains.
            echo "You can find a visualization of the bean instantiation graph in deferredEagerBeanInstantiationViolations.dot when starting the application locally."
            echo "You can visualize the file on http://webgraphviz.com/"
          else
            echo "‚úÖ No deferred dependency chains exceed the threshold of $MAX_DEFERRED_CHAIN_LENGTH"
          fi

          if [ "$DEFERRED_VALIDATION_FAILED" = "true" ]; then
            exit 1
          fi

      - name: Stop application
        if: always()
        run: kill $(<app.pid) || true

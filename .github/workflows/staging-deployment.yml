name: Artemis Staging Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true

concurrency: staging

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      can_deploy: ${{ steps.check_build.outputs.can_deploy }}
      workflow_run_id: ${{ steps.get_workflow_run.outputs.data.workflow_runs[0].id }}
    steps:
      - name: Get latest build workflow run
        id: get_workflow_run
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/workflows/build.yml/runs?branch=${{ github.event.inputs.branch }}&per_page=1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Check for war artifact
        id: verify_artifact
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/runs/${{ fromJson(steps.get_workflow_run.outputs.data).workflow_runs[0].id }}/artifacts?name=Artemis.war
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Verify artifact exists
        id: check_result
        run: |
          TOTAL_COUNT=$(echo '${{ steps.verify_artifact.outputs.data }}' | jq -r '.total_count')
            
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "can_deploy=true" >> $GITHUB_OUTPUT
            echo "Found Artemis.war artifact in latest build"
          else
            echo "can_deploy=false" >> $GITHUB_OUTPUT
            echo "No Artemis.war artifact found in latest build"
            exit 1
          fi

  deploy:
    needs: check-build-status
    if: needs.check-build-status.outputs.can_deploy == 'true'
    runs-on: ubuntu-latest
    environment: 
        name: artemis-staging-localci.artemis.cit.tum.de
        url: https://artemis-staging-localci.artemis.cit.tum.de
    env:
      NODE_HOSTNAME_POSTFIX: ${{ secrets.NODE_HOSTNAME_POSTFIX }}
      SECONDARY_NODE_HOSTNAMES: ${{ secrets.SECONDARY_NODE_HOSTNAMES }}
      PRIMARY_NODE: ${{ secrets.PRIMARY_NODE_HOSTNAME }}
      VM_USERNAME: ${{ secrets.SSH_USERNAME }}
      HEALTH_CHECK_URL: "https://artemis-staging-localci.artemis.cit.tum.de/management/health"
      WORKFLOW_RUN_ID: ${{needs.check-build-status.outputs.workflow_run_id}}

    timeout-minutes: 30
    
    steps:
      - name: Download artifact from another workflow
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ env.WORKFLOW_RUN_ID }} 
            });
            const matchArtifact = artifacts.data.artifacts.find((artifact) => {
              return artifact.name === "Artemis.war"
            });
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip'
            });
            const fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/artifact.zip', Buffer.from(download.data));

      - name: Unzip artifact
        run: unzip artifact.zip -d artifacts

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${PRIMARY_NODE}${NODE_HOSTNAME_POSTFIX} >> ~/.ssh/known_hosts
          for node in $SECONDARY_NODE_HOSTNAMES; do
            ssh-keyscan -t rsa ${node}${NODE_HOSTNAME_POSTFIX} >> ~/.ssh/known_hosts
          done

      - name: Phase 1 - Stop Secondary Nodes
        run: |
          for node in $SECONDARY_NODE_HOSTNAMES; do
            VM_HOSTNAME="${node}${NODE_HOSTNAME_POSTFIX}"
            echo "[INFO] Stop artemis.service on ${VM_HOSTNAME} ..."
            ssh -o LogLevel=ERROR -l $VM_USERNAME $VM_HOSTNAME "sudo systemctl stop artemis"
          done

      - name: Phase 1 - Deploy to Primary Node
        run: |
          VM_HOSTNAME="${PRIMARY_NODE}${NODE_HOSTNAME_POSTFIX}"
          echo "[INFO] Deploy on $VM_HOSTNAME ..."
          
          # Remove old backup
          ssh -o LogLevel=ERROR -l $VM_USERNAME $VM_HOSTNAME "rm -f /opt/artemis/artemis.war.old"
          
          # Copy new war file
          scp -o LogLevel=ERROR artifacts/*.war $VM_USERNAME@$VM_HOSTNAME:/opt/artemis/artemis.war.new
          
          # Stop service, rotate files, and start service
          ssh -o LogLevel=ERROR -l $VM_USERNAME $VM_HOSTNAME << 'ENDSSH'
            sudo systemctl stop artemis
            mv /opt/artemis/artemis.war /opt/artemis/artemis.war.old
            mv /opt/artemis/artemis.war.new /opt/artemis/artemis.war
            sudo systemctl start artemis
          ENDSSH

      - name: Verify Primary Node Deployment
        id: verify_deployment
        run: |
          while true; do
            echo "Performing health check..."
      
            RESPONSE=$(curl -s -f $HEALTH_CHECK_URL || echo '{"status":"DOWN"}')
            STATUS=$(echo $RESPONSE | jq -r '.status')
      
            if [ "$STATUS" = "UP" ]; then
              echo "Health check passed! Application is UP"
              exit 0
            else
              echo "Health check failed. Status: $STATUS"
              echo "Waiting 30 seconds before next attempt..."
              sleep 30
            fi
          done

      - name: Phase 2 - Deploy to Secondary Nodes
        run: |
          for node in $SECONDARY_NODE_HOSTNAMES; do
            VM_HOSTNAME="${node}${NODE_HOSTNAME_POSTFIX}"
            echo "[INFO] Deploy on $VM_HOSTNAME ..."
            
            ssh -o LogLevel=ERROR -l $VM_USERNAME $VM_HOSTNAME "rm -f /opt/artemis/artemis.war.old"
            scp -o LogLevel=ERROR artifacts/*.war $VM_USERNAME@$VM_HOSTNAME:/opt/artemis/artemis.war.new
            
            ssh -o LogLevel=ERROR -l $VM_USERNAME $VM_HOSTNAME << 'ENDSSH'
              sudo systemctl stop artemis
              mv /opt/artemis/artemis.war /opt/artemis/artemis.war.old
              mv /opt/artemis/artemis.war.new /opt/artemis/artemis.war
              sudo systemctl start artemis
            ENDSSH
          done
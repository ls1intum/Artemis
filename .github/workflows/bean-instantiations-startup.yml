name: Check Bean Instantiations on Startup

on:
  push:
    branches: [ develop ]
    paths:
      - src/main/java/**
  pull_request:
# TODO revert this before merging
#    paths:
#      -  src/main/java/**

jobs:
  build:
    name: Check Bean Instantiations on Startup
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build application
        run: ./gradlew clean bootJar -x test -x webapp

      - name: Start Spring Boot app
        run: |
          PROFILES=dev,localci,lti,aeolus,theia,iris,localvc,artemis,scheduling,buildagent,core,ldap,no-liquibase
          JAR=$(ls build/libs/Artemis*.jar | head -n1)
          nohup java -jar $JAR \
            --spring.profiles.active=dev,localci,lti,aeolus,theia,iris,localvc,artemis,scheduling,buildagent,core,ldap,no-liquibase \
            --artemis.user-management.passkey.enabled=true \
            --artemis.user-management.use-external=false \
            --artemis.iris.url=http://iris.fake \
            --artemis.iris.secret-token=token \
            --spring.liquibase.enabled=false \
            --spring.datasource.url="jdbc:h2:mem:mydb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE" \
            --spring.datasource.username=sa \
            --spring.datasource.password= \
            --eureka.client.enabled=false \
            --aeolus.url=http://aeolus.fake \
            > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for the application to start
        run: |
          RUNNING_MESSAGE="'Artemis is running!'"
          echo "Waiting up to 60s for $RUNNING_MESSAGE to appear in app.log..."

          isAppRunning=false
          for i in {1..30}; do
            if grep -q $RUNNING_MESSAGE app.log; then
              isAppRunning=true
              echo "‚úÖ Found $RUNNING_MESSAGE in app.log after $i attempts"
              break
            fi
            echo "  attempt $i/30: not found yet"
            sleep 2
          done

          if [ "$isAppRunning" = false ]; then
            echo "‚ùå Timeout: $RUNNING_MESSAGE not found in app.log"
            cat app.log
            exit 1
          fi

      - name: Extract and validate bean instantiation metrics
        run: |
          LINE=$(grep 'Bean instantiation graph exported' app.log) \
            || { echo "‚ùå No metrics line"; cat app.log; exit 1; }
          if [[ "$LINE" =~ \(([0-9]+)\ edges,\ max\ call\ stack\ size:\ ([0-9]+)\) ]]; then
            EDGES=${BASH_REMATCH[1]}
            MAXSTACK=${BASH_REMATCH[2]}
          else
            echo "‚ùå Failed to parse numbers"; exit 1
          fi
          echo "‚Ä¢ Number of edges = $EDGES"
          echo "‚Ä¢ Max call stack size = $MAXSTACK"
          MIN_EDGES=20
          MAX_EDGES=94
          MAX_STACK_SIZE_THRESHOLD=9
          echo "Validating against thresholds: MIN_EDGES=$MIN_EDGES, MAX_EDGES=$MAX_EDGES, MAX_STACK_SIZE_THRESHOLD=$MAX_STACK_SIZE_THRESHOLD"
          if (( EDGES < MIN_EDGES )); then
          echo "‚ùå < $MIN_EDGES edges. Something seems to be wrong, as usually more beans are instantiated."
          exit 1
          fi

          if (( EDGES > MAX_EDGES )); then
          echo "‚ùå > $MAX_EDGES edges"
          exit 1
          fi

          if (( MAXSTACK > MAX_STACK_SIZE_THRESHOLD )); then
          echo "‚ùå stack > $MAX_STACK_SIZE_THRESHOLD"
          exit 1
          fi
          echo "‚úÖ Final values ‚Üí Edges: $EDGES; Max call stack size: $MAXSTACK"
          echo "üéâ Number of instantiated beans on startup within expected ranges"

      - name: Stop application
        if: always()
        run: kill $(<app.pid) || true

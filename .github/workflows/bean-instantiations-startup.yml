name: Check Bean Instantiations on Startup

on:
  pull_request:
#    paths:
#      - 'src/main/java/**'

jobs:
  build:
    name: Check Bean Instantiations on Startup
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Build application
        run: ./gradlew clean assemble -x test -x webapp

      - name: Start Spring Boot app
        run: |
          PROFILES=dev,localci,lti,aeolus,theia,iris,localvc,artemis,scheduling,buildagent,core,ldap
          nohup ./gradlew bootRun -x webapp --args="--spring.profiles.active=$PROFILES --artemis.user-management.passkey.enabled=true --artemis.user-management.use-external=false --artemis.iris.url=http://iris.fake \
          --artemis.iris.secret-token=token --spring.liquibase.enabled=false --eureka.client.enabled=false --aeolus.url=http://aeolus.fake" > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for health endpoint
        run: |
          URL=http://localhost:8080/management/health/liveness
          echo "Waiting for $URL ‚Üí UP"
          for i in {1..30}; do
            if curl -s $URL | grep -q '"status":"UP"'; then
              echo "‚úÖ Actuator is UP (after $i attempts)"
              break
            fi
            sleep 2
          done
          if ! curl -s $URL | grep -q '"status":"UP"'; then
            echo "‚ùå Health check failed; dumping last 50 lines:"
            cat app.log
            exit 1
          fi

      - name: Extract and validate metrics
        run: |
          LINE=$(grep 'Bean instantiation graph exported' app.log) \
            || { echo "‚ùå No metrics line"; cat app.log; exit 1; }
          echo "‚úÖ Metrics line: $LINE"
          if [[ "$LINE" =~ \(([0-9]+)\ edges,\ max\ call\ stack\ size:\ ([0-9]+)\) ]]; then
            EDGES=${BASH_REMATCH[1]}
            MAXSTACK=${BASH_REMATCH[2]}
          else
            echo "‚ùå Failed to parse numbers"; exit 1
          fi
          echo "‚Ä¢ Number of edges = $EDGES"
          echo "‚Ä¢ Max call stack size = $MAXSTACK"
          MIN_EDGES=20
          MAX_EDGES=86
          MAX_STACK_SIZE_THRESHOLD=10
          (( EDGES < MIN_EDGES )) && { echo "‚ùå < $MIN_EDGES edges"; exit 1; }
          (( EDGES > MAX_EDGES ))   && { echo "‚ùå > $MAX_EDGES edges"; exit 1; }
          (( MAXSTACK > MAX_STACK_SIZE_THRESHOLD )) && { echo "‚ùå stack > $MAX_STACK_SIZE_THRESHOLD"; exit 1; }
          echo "‚úÖ Final values ‚Üí Edges: $EDGES; Max call stack size: $MAXSTACK"
          echo "üéâ Bean metrics within expected ranges"

      - name: Stop application
        if: always()
        run: kill $(<app.pid) || true

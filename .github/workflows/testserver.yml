name: Artemis Staging Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true

concurrency: staging

env:
  build_workflow_name: build.yml

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      build_workflow_run_id: ${{ steps.set_build_workflow_id.outputs.workflow_id }} 
    steps:
      - name: Get latest build workflow run
        id: get_workflow_run
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/workflows/${{ env.build_workflow_name }}/runs?branch=${{ github.event.inputs.branch }}&per_page=1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build workflow ID
        id: set_build_workflow_id
        run: |
          WORKFLOW_ID=$(echo '${{ steps.get_workflow_run.outputs.data }}' | jq -r '.workflow_runs[0].id')
          echo "workflow_id=$WORKFLOW_ID" >> $GITHUB_OUTPUT
  
      - name: Check for war artifact
        id: verify_artifact
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/runs/${{ steps.set_build_workflow_id.outputs.workflow_id }}/artifacts?name=Artemis.war
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Verify artifact exists
        id: check_result
        run: |
          TOTAL_COUNT=$(echo '${{ steps.verify_artifact.outputs.data }}' | jq -r '.total_count')
            
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "Found Artemis.war artifact in latest build"
          else
            echo "::error::No Artemis.war artifact found in latest build!"
            exit 1
          fi

  deploy:
    needs: check-build-status
    runs-on: [self-hosted, ase-large-ubuntu]
    environment: 
        name: artemis-staging-localci.artemis.cit.tum.de
        url: ${{ vars.DEPLOYMENT_URL }}
    env:
      DEPLOYMENT_HOSTS_PRIMARY: ${{ vars.DEPLOYMENT_HOSTS_PRIMARY}}
      DEPLOYMENT_HOSTS_SECONDARY: "artemis-staging-localci-node-2.artemis.cit.tum.de artemis-staging-localci-node-3.artemis.cit.tum.de artemis-staging-localci-node-4.artemis.cit.tum.de artemis-staging-localci-node-5.artemis.cit.tum.de"
      DEPLOYMENT_USER: ${{ vars.DEPLOYMENT_USER }}

      DEPLOYMENT_FOLDER: ${{ vars.DEPLOYMENT_FOLDER }}

      HEALTH_CHECK_URL: "${{vars.DEPLOYMENT_URL}}/management/health"
      WORKFLOW_RUN_ID: ${{needs.check-build-status.outputs.build_workflow_run_id}}

    timeout-minutes: 10
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Artemis.war
          path: artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ env.WORKFLOW_RUN_ID  }}

      - name: Setup SSH and Test Connectivity
        env:
          DEPLOYMENT_SSH_KEY: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          SSH_AUTH_SOCK: /tmp/ssh_agent_${{ github.run_id }}.sock  
          DEPLOYMENT_HOST_PUBLIC_KEYS: ${{ vars.DEPLOYMENT_HOST_PUBLIC_KEYS }}
        run: |
          # Cleanup any existing socket
          if [ -S "$SSH_AUTH_SOCK" ]; then
            rm -f "$SSH_AUTH_SOCK"
          fi
          
          # Create .ssh directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Start SSH agent with the unique socket
          ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null
          
          # Add the deployment key
          ssh-add - <<< "$DEPLOYMENT_SSH_KEY"
          
          # Add host keys
          cat - <<< "$DEPLOYMENT_HOST_PUBLIC_KEYS" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
          # List identities
          ssh-add -l || echo "No identities found"
          
          echo "Testing connectivity to primary node:"
          ping -c 3 $DEPLOYMENT_HOSTS_PRIMARY
          
          echo "Testing SSH connection to primary node:"
          ssh -o BatchMode=yes -o StrictHostKeyChecking=accept-new \
              -l $DEPLOYMENT_USER $DEPLOYMENT_HOSTS_PRIMARY "echo 'SSH connection successful'"

      - name: Phase 1 - Deploy to Primary Node
        run: |
          echo "[INFO] Deploy on $DEPLOYMENT_HOSTS_PRIMARY ..."
          
          # Remove old backup
          ssh -o BatchMode=yes -o StrictHostKeyChecking=accept-new \
              -l $DEPLOYMENT_USER $DEPLOYMENT_HOSTS_PRIMARY \
              "rm -f $DEPLOYMENT_FOLDER/artemis.war.old" || exit 1
          
          # Copy new war file
          scp -o BatchMode=yes -o StrictHostKeyChecking=accept-new \
              artifacts/*.war $DEPLOYMENT_USER@$DEPLOYMENT_HOSTS_PRIMARY:$DEPLOYMENT_FOLDER/artemis.war.new || {
            echo "::error::Failed to copy war file to primary host"
            exit 1
          }

          # Stop service, rotate files, and start service
          ssh -o BatchMode=yes -o StrictHostKeyChecking=accept-new \
              -l $DEPLOYMENT_USER $DEPLOYMENT_HOSTS_PRIMARY << 'ENDSSH' || exit 1
            set -e
            sudo systemctl stop artemis
            mv $DEPLOYMENT_FOLDER/artemis.war $DEPLOYMENT_FOLDER/artemis.war.old
            mv $DEPLOYMENT_FOLDER/artemis.war.new $DEPLOYMENT_FOLDER/artemis.war
            sudo systemctl start artemis
          ENDSSH

      - name: Verify Primary Node Deployment
        id: verify_deployment
        run: |
          while true; do
            echo "Performing health check..."
      
            RESPONSE=$(curl -s -f $HEALTH_CHECK_URL || echo '{"status":"DOWN"}')
            STATUS=$(echo $RESPONSE | jq -r '.status')
      
            if [ "$STATUS" = "UP" ]; then
              echo "Health check passed! Application is UP"
              exit 0
            else
              echo "Health check failed. Status: $STATUS"
              echo "Waiting 10 seconds before next attempt..."
              sleep 10
            fi
          done

      
name: Artemis Staging Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
      vpn_config:
        description: 'TUM VPN configuration'
        required: true

concurrency: staging

env:
  build_workflow_name: build.yml

jobs:
  check-build-status:
    runs-on: ubuntu-latest
    outputs:
      build_workflow_run_id: ${{ steps.set_build_workflow_id.outputs.workflow_id }} 
    steps:
      - name: Get latest build workflow run
        id: get_workflow_run
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/workflows/${{ env.build_workflow_name }}/runs?branch=${{ github.event.inputs.branch }}&per_page=1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build workflow ID
        id: set_build_workflow_id
        run: |
          WORKFLOW_ID=$(echo '${{ steps.get_workflow_run.outputs.data }}' | jq -r '.workflow_runs[0].id')
          echo "workflow_id=$WORKFLOW_ID" >> $GITHUB_OUTPUT
  
      - name: Check for war artifact
        id: verify_artifact
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/actions/runs/${{ steps.set_build_workflow_id.outputs.workflow_id }}/artifacts?name=Artemis.war
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Verify artifact exists
        id: check_result
        run: |
          TOTAL_COUNT=$(echo '${{ steps.verify_artifact.outputs.data }}' | jq -r '.total_count')
            
          if [ "$TOTAL_COUNT" -gt 0 ]; then
            echo "Found Artemis.war artifact in latest build"
          else
            echo "::error::No Artemis.war artifact found in latest build!"
            exit 1
          fi

  deploy:
    needs: check-build-status
    runs-on: ubuntu-latest
    environment: 
        name: artemis-staging-localci.artemis.cit.tum.de
        url: ${{ vars.DEPLOYMENT_URL }}
    env:
      DEPLOYMENT_HOSTS_PRIMARY: ${{ vars.DEPLOYMENT_HOSTS_PRIMARY}}
      DEPLOYMENT_HOSTS_SECONDARY: "artemis-staging-localci-node-2.artemis.cit.tum.de artemis-staging-localci-node-3.artemis.cit.tum.de artemis-staging-localci-node-4.artemis.cit.tum.de artemis-staging-localci-node-5.artemis.cit.tum.de"
      DEPLOYMENT_USER: ${{ vars.DEPLOYMENT_USER }}

      DEPLOYMENT_FOLDER: ${{ vars.DEPLOYMENT_FOLDER }}
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock 

      HEALTH_CHECK_URL: "${{vars.DEPLOYMENT_URL}}/management/health"
      WORKFLOW_RUN_ID: ${{needs.check-build-status.outputs.build_workflow_run_id}}

    timeout-minutes: 10
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Artemis.war
          path: artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ env.WORKFLOW_RUN_ID  }}

      - name: Setup VPN
        env:
          VPN_CONFIG: ${{  github.event.inputs.vpn_config }}
        run: |
          # Install OpenVPN
          sudo apt-get update
          sudo apt-get install -y openvpn
      
          # Save VPN config
          echo "$VPN_CONFIG" > /tmp/config.ovpn
          
          # Debug: Check config file
          echo "Checking VPN config file:"
          cat /tmp/config.ovpn
          
          # Start VPN with verbose logging
          echo "Starting OpenVPN..."
          sudo openvpn --config /tmp/config.ovpn --daemon --log /tmp/vpn.log --verb 4
          
          # Wait for VPN to initialize
          echo "Waiting for VPN connection..."
          sleep 30
          
          # Debug: Check VPN status
          echo "VPN log:"
          sudo cat /tmp/vpn.log
          
          # Check if tun interface is created
          echo "Network interfaces:"
          ip a
          
          # Test connection to target
          echo "Testing connection..."
          ping -c 1 172.24.70.146 || {
            echo "VPN connection failed"
            echo "Latest VPN logs:"
            sudo tail -n 50 /tmp/vpn.log
            exit 1
          }
          
          # If we get here, VPN is working
          echo "VPN connection established"
        
      - name: Debug Network
        if: failure()
        run: |
          echo "Network route table:"
          ip route
          
          echo "DNS resolution:"
          cat /etc/resolv.conf
          
          echo "Can we reach the VPN server?"
          ping -c 1 eduvpn-n19.srv.lrz.de || true
          
          echo "OpenVPN status:"
          sudo systemctl status openvpn || true
      - name: Setup SSH
        env:
          DEPLOYMENT_SSH_KEY: ${{ secrets.DEPLOYMENT_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOYMENT_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${DEPLOYMENT_HOSTS_PRIMARY} >> ~/.ssh/known_hosts
          for node in $DEPLOYMENT_HOSTS_SECONDARY; do
            ssh-keyscan -t rsa ${node} >> ~/.ssh/known_hosts
          done

      - name: Test SSH Configuration
        run: |
          echo "Testing SSH configuration..."
          ssh -v -o BatchMode=yes -o ConnectTimeout=10 \
              -l $DEPLOYMENT_USER $DEPLOYMENT_HOSTS_PRIMARY "echo 'SSH test successful'" || {
            echo "::error::SSH test failed"
            exit 1
          }
  
      - name: Network Diagnostics
        run: |
          for node in $DEPLOYMENT_HOSTS_SECONDARY; do
            echo "Testing connectivity to $node..."
            # Try ping
            ping -c 1 -W 5 $node || echo "Ping failed for $node"
            
            # Try telnet to SSH port
            timeout 5 nc -zv $node 22 || echo "Cannot connect to SSH port on $node"
            
            # Try traceroute
            traceroute -n -w 2 $node || echo "Traceroute failed for $node"
          done
      
      - name: Phase 1 - Stop Secondary Nodes
        run: |
          for node in $DEPLOYMENT_HOSTS_SECONDARY; do
            VM_HOSTNAME="${node}"
            echo "[INFO] Stop artemis.service on ${VM_HOSTNAME} ..."
            ssh -o LogLevel=ERROR -l $DEPLOYMENT_USER $VM_HOSTNAME "sudo systemctl stop artemis"
          done
      - name: Phase 1 - Deploy to Primary Node
        run: |
          VM_HOSTNAME="${DEPLOYMENT_HOSTS_PRIMARY}"
          echo "[INFO] Deploy on $VM_HOSTNAME ..."
          
          # Remove old backup
          ssh -o LogLevel=ERROR -l $DEPLOYMENT_USER $VM_HOSTNAME "rm -f $DEPLOYMENT_FOLDER/artemis.war.old"
          
          # Copy new war file
          scp -o LogLevel=ERROR artifacts/*.war $DEPLOYMENT_USER@$VM_HOSTNAME:$DEPLOYMENT_FOLDER/artemis.war.new
          
          # Stop service, rotate files, and start service
          ssh -o LogLevel=ERROR -l $DEPLOYMENT_USER $VM_HOSTNAME << 'ENDSSH'
            sudo systemctl stop artemis
            mv $DEPLOYMENT_FOLDER/artemis.war $DEPLOYMENT_FOLDER/artemis.war.old
            mv $DEPLOYMENT_FOLDER/artemis.war.new $DEPLOYMENT_FOLDER/artemis.war
            sudo systemctl start artemis
          ENDSSH
      - name: Verify Primary Node Deployment
        id: verify_deployment
        run: |
          while true; do
            echo "Performing health check..."
      
            RESPONSE=$(curl -s -f $HEALTH_CHECK_URL || echo '{"status":"DOWN"}')
            STATUS=$(echo $RESPONSE | jq -r '.status')
      
            if [ "$STATUS" = "UP" ]; then
              echo "Health check passed! Application is UP"
              exit 0
            else
              echo "Health check failed. Status: $STATUS"
              echo "Waiting 30 seconds before next attempt..."
              sleep 30
            fi
          done
      - name: Phase 2 - Deploy to Secondary Nodes
        run: |
          for node in $DEPLOYMENT_HOSTS_SECONDARY; do
            VM_HOSTNAME="${node}"
            echo "[INFO] Deploy on $VM_HOSTNAME ..."
            
            ssh -o LogLevel=ERROR -l $DEPLOYMENT_USER $VM_HOSTNAME "rm -f $DEPLOYMENT_FOLDER/artemis.war.old"
            scp -o LogLevel=ERROR artifacts/*.war $DEPLOYMENT_USER@$VM_HOSTNAME:$DEPLOYMENT_FOLDER/artemis.war.new
            
            ssh -o LogLevel=ERROR -l $DEPLOYMENT_USER $VM_HOSTNAME << 'ENDSSH'
              sudo systemctl stop artemis
              mv $DEPLOYMENT_FOLDER/artemis.war $DEPLOYMENT_FOLDER/artemis.war.old
              mv $DEPLOYMENT_FOLDER/artemis.war.new $DEPLOYMENT_FOLDER/artemis.war
              sudo systemctl start artemis
            ENDSSH
          done

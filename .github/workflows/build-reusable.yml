name: Build (reusable)

on:
  # workflow_call makes it possible to trigger this build workflow from another workflow
  # workflow_call is used to build the Artemis for deployments handled by Helios for specific cases
  # Inconsistent behavior of the workflow_call is that it inherits the event name of the calling workflow
  # That's why we need to check for the event name in the steps as workflow_dispatch but not as workflow_call
  # Since the testserver.yml is triggered by a workflow_dispatch, the build.yml will also be triggered by a workflow_dispatch
  workflow_call:
    inputs:
      sha:
        description: "Specific commit sha"
        required: true
        type: string
      tag:
        description: "Tag to use when building Docker image"
        required: true
        type: string
      raw_url:
        description: "URL to use for fetching files in the format https://raw.githubusercontent.com/:owner/:repo/:sha"
        required: true
        type: string

# Keep build-reusable.yml in sync with build.yml

# Keep in sync with codeql-analysis.yml and test.yml and analysis-of-endpoint-connections.yml and build.yml
env:
  CI: true
  node: 22
  java: 21
  RAW_URL: https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}

jobs:

  build:
    name: Build .war artifact
    runs-on: ubuntu-latest
    steps:
      - name: Print Event
        run: echo "Event name is ${{ github.event_name }}"
      - name: Override RAW_URL for workflow_call
        run: echo "RAW_URL=${{ inputs.raw_url }}" >> $GITHUB_ENV
      - name: Git Checkout (for workflow_call)
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.node }}'
          cache: 'npm'
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '${{ env.java }}'
          cache: 'gradle'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Production Build
        run: ./gradlew -Pprod -Pwar clean bootWar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Artemis.war
          path: build/libs/Artemis-*.war

  docker:
    name: Build and Push Docker Image
    if: ${{ github.event.pull_request.head.repo.full_name == 'ls1intum/Artemis' }}
    runs-on: ubuntu-latest
    steps:
      - name: Override RAW_URL for workflow_call
        run: echo "RAW_URL=${{ inputs.raw_url }}" >> $GITHUB_ENV

      - name: Compute Tag
        uses: actions/github-script@v7
        id: compute-tag
        with:
          result-encoding: string
          script: |
            if (context.eventName === "workflow_call") {
              // Use the "tag" passed in via the workflow_call
              return context.payload.inputs.tag;
            }

            return "FALSE";
      - name: Git Checkout for workflow_call
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Build and Push to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ steps.compute-tag.outputs.result != 'FALSE' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v5
        if: ${{ steps.compute-tag.outputs.result != 'FALSE' }}
        with:
          # beware that the linux/arm64 build from the registry is using an amd64 compiled .war file as
          # the GitHub runners don't support arm64 and QEMU takes too long for emulating the build
          platforms: linux/amd64,linux/arm64
          file: ./docker/artemis/Dockerfile
          context: .
          tags: ghcr.io/ls1intum/artemis:${{ steps.compute-tag.outputs.result }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=min
